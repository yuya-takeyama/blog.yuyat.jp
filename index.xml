<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Born Too Late</title>
    <link>https://blog.yuyat.jp/</link>
    <description>Recent content on Born Too Late</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 30 Dec 2018 01:25:45 +0900</lastBuildDate>
    <atom:link href="https://blog.yuyat.jp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kubernetes The Hard Way をやってみた</title>
      <link>https://blog.yuyat.jp/post/kubernetes-the-hard-way/</link>
      <pubDate>Sun, 30 Dec 2018 01:25:45 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/kubernetes-the-hard-way/</guid>
      <description>

&lt;p&gt;冬休みに入ったので、前からやってみたいと思っていた &lt;a href=&#34;https://github.com/kelseyhightower/kubernetes-the-hard-way&#34;&gt;Kubernetes The Hard Way&lt;/a&gt; をやってみました。という日記です。&lt;/p&gt;

&lt;h2 id=&#34;何故やったか&#34;&gt;何故やったか&lt;/h2&gt;

&lt;p&gt;4 月に SRE チームに異動してから 8 ヶ月ほど経ち、その間 Kubernetes クラスタの構築・運用・アプリケーションの移行などあらゆることをして来たが、未だに Kubernetes わかってる感が薄いので、もっと細かいところまで理解しようというモチベーションでやってみた。&lt;/p&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;p&gt;ほぼ 100% &lt;a href=&#34;https://github.com/kelseyhightower/kubernetes-the-hard-way&#34;&gt;Kubernetes The Hard Way&lt;/a&gt; に書いてある手順通り。GCP を使って、複数のサーバでの作業が必要な時は tmux の &lt;code&gt;set synchronize-panes on&lt;/code&gt; を使って (実は初めて使った)。&lt;/p&gt;

&lt;h2 id=&#34;所要時間&#34;&gt;所要時間&lt;/h2&gt;

&lt;p&gt;合計 3 時間弱。思ったほど時間がかからなかったので、別に普通の土日でも問題なくできる量。所要時間は個人 Slack でスレッド内に進捗や気になった点をメモしながらだったので、それで計測。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prerequisites ~ Provisioning a CA and Generating TLS Certificates

&lt;ul&gt;
&lt;li&gt;55 分&lt;/li&gt;
&lt;li&gt;Provisioning a CA and Generating TLS Certificates はひたすらいろんな鍵を生成するばかりで退屈だった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Generating Kubernetes Configuration Files for Authentication ~ Bootstrapping the Kubernetes Control Plane

&lt;ul&gt;
&lt;li&gt;50 分&lt;/li&gt;
&lt;li&gt;Bootstrapping the Kubernetes Control Plane は全体で一番時間がかかったように思う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bootstrapping the Kubernetes Worker Nodes ~ Cleaning Up

&lt;ul&gt;
&lt;li&gt;55 分&lt;/li&gt;
&lt;li&gt;実際に Nginx が動いたりするとそこそこ嬉しかった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、個人の GCP アカウントは以前から持っていたので、そこの時間は含まれない。作業に使用する tmux も普段から使っており、そのインストール時間も含まれない。&lt;/p&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;思ったほど Hard ではない

&lt;ul&gt;
&lt;li&gt;基本的にはコマンドをコピペするだけで動くので、ミスしなければ誰がやっても普通に動くと思う&lt;/li&gt;
&lt;li&gt;むしろ無意識的にやってもできそうだが、それだとさすがに意味がないので、コマンドだったり設定ファイルの中身はじっくり眺めながら進めた方が良い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;対象者は Kubernetes の運用やその上での開発をある程度やっている人か

&lt;ul&gt;
&lt;li&gt;コピペだけでもできるので、Kubernetes を全く知らない人でもできるとは思うが、さすがにそれで何かを得るのは難しいのではと思った&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;これをやっただけで「これ」と言える何かを得るのは簡単ではないかも

&lt;ul&gt;
&lt;li&gt;全体的なイメージはなんとなく持つことができる&lt;/li&gt;
&lt;li&gt;やってみても、Kubernetes のセットアップ方法は様々なので、どこまでが普遍的な知識なのはわかりづらい&lt;/li&gt;
&lt;li&gt;今回は kube-proxy を systemd で起動したけど、普段仕事で使っているクラスタでは DaemonSet で起動してるはずで、それによって何が違ってくるんだろう、とか&lt;/li&gt;
&lt;li&gt;疑問を元に何かを調べるためのきっかけとしては良いかもしれない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;あらかじめ作業ディレクトリを作って、その中で作業を行うのが良い

&lt;ul&gt;
&lt;li&gt;全て終えた時点で、50 近いファイルが作成される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CircleCI 上でのコマンドの実行時間を Datadog に残す circle-dd-bench 作った</title>
      <link>https://blog.yuyat.jp/post/circle-dd-bench/</link>
      <pubDate>Tue, 25 Dec 2018 23:30:00 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/circle-dd-bench/</guid>
      <description>

&lt;p&gt;この記事は &lt;a href=&#34;https://qiita.com/advent-calendar/2018/circleci&#34;&gt;CircleCI Advent Calendar 2018&lt;/a&gt; 7 日目の記事です。今日は 12 月 25 日ですが、自分の担当分をサボっていたわけではなく、週末作ったツールについて今朝方ツイートしたところ、CircleCI Japan の中の方に「アドベントカレンダーの7日目が空いてしまったのてすがもしよければ」と誘われて書いている次第です。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;CircleCI でコマンドごとの実行時間を Datadog に記録するためのコマンドを作った &lt;a href=&#34;https://t.co/TojoKhOQ1f&#34;&gt;https://t.co/TojoKhOQ1f&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yuya Takeyama (@yuya_takeyama) &lt;a href=&#34;https://twitter.com/yuya_takeyama/status/1077375699969728514?ref_src=twsrc%5Etfw&#34;&gt;December 25, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;というわけで早速この &lt;a href=&#34;https://github.com/yuya-takeyama/circle-dd-bench&#34;&gt;circle-dd-bench&lt;/a&gt; というツールについて紹介します。&lt;/p&gt;

&lt;h2 id=&#34;これは何&#34;&gt;これは何？&lt;/h2&gt;

&lt;p&gt;これは CircleCI 内でコマンドを実行する際、ラッパーとして使用することで、実行時間を Datadog にメトリックとして記録するというものです。&lt;/p&gt;

&lt;p&gt;例えばこのようなコマンドを実行していた場合&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build . -t burzum
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように書き換えると使用できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;circle-dd-bench --tag command:docker-build --tag product:burzum -- docker build . -t burzum
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際には &lt;code&gt;DATADOG_API_KEY&lt;/code&gt; という環境変数に Datadog の API Key を持たせておく必要があります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--tag&lt;/code&gt; は必須ではなく、デフォルトで CircleCI の以下のような環境変数がタグとして付与されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CIRCLE_PROJECT_USERNAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CIRCLE_PROJECT_REPONAME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CIRCLE_BRANCH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CIRCLE_JOB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;使ってみた&#34;&gt;使ってみた&lt;/h2&gt;

&lt;p&gt;実際にこの &lt;code&gt;circle-dd-bench&lt;/code&gt; を使って記録したメトリックを元に Datadog 上で作成したダッシュボードがこちらです。ここではあらゆるサービスの &lt;code&gt;docker build&lt;/code&gt; の実行時間を計測しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.yuyat.jp/images/circle-dd-bench/datadog.png&#34; width=&#34;1156&#34; height=&#34;322&#34;&gt;&lt;/p&gt;

&lt;p&gt;まだ CircleCI の config に組み込む Pull Request を出して、そのブランチ上で 2-3 回実行しただけで、&lt;code&gt;Dockerfile&lt;/code&gt; の最適化を行なってはいないため、サービスごとの &lt;code&gt;docker build&lt;/code&gt; にかかる時間の変化は誤差のみです。ですが、どのサービスの &lt;code&gt;docker build&lt;/code&gt; に時間がかかっているかは一目瞭然なので、それから最適化に着手していけばいいことになります。&lt;/p&gt;

&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;

&lt;p&gt;一言でいうと、CircleCI の実行時間を最適化するにあたって、各コマンド単位でどれぐらい時間がかかっているのかを定点観測しておきたかったためです。&lt;/p&gt;

&lt;p&gt;私が社員として所属する Quipper ではマイクロサービス化を進めるにあたって、かつては 1 サービス 1 リポジトリだったものを、一つの Monorepo に集約しています。背景については以下の記事やスライドをご覧ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://quipper.hatenablog.com/entry/future-with-kubernetes&#34;&gt;Kubernetes導入で実現したい世界とその先にあるMicroservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/yuyatakeyama/how-quipper-works-with-circleci&#34;&gt;How Quipper Works with CircleCI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特にみていただきたいのは後者のスライドに含まれる以下の &lt;a href=&#34;https://speakerdeck.com/yuyatakeyama/how-quipper-works-with-circleci?slide=14&#34;&gt;CircleCI の Workflow のスクリーンショット&lt;/a&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.yuyat.jp/images/circle-dd-bench/workflow.png&#34; width=&#34;1126&#34; height=&#34;655&#34;&gt;&lt;/p&gt;

&lt;p&gt;たくさんのサービスの Docker Build やユニットテストが並列して実行されるため、このスクリーンショットを作成した時点で 83 もの Job が Workflow 内に含まれます (その後もう少し増えています)&lt;/p&gt;

&lt;p&gt;この図を踏まえてもう少し背景を説明すると、以下のような理由が挙げられます。&lt;/p&gt;

&lt;h3 id=&#34;circleci-の-insights-が-workflow-では役に立たない&#34;&gt;CircleCI の Insights が Workflow では役に立たない&lt;/h3&gt;

&lt;p&gt;CircleCI には Insights という機能があり、Job の実行時間の履歴をグラフとしてビジュアライズする機能があります。&lt;/p&gt;

&lt;p&gt;これは CircleCI 1.0 時代には大変有用でしたが、CircleCI 2.0 の Workflow を使っている場合はそうではありません。質の異なる複数の Job が一様にグラフ化されるため、一見して役に立てるのはこんなんです。&lt;/p&gt;

&lt;p&gt;なので別のアプローチでビジュアライズを試みる必要があります。&lt;/p&gt;

&lt;h3 id=&#34;同じコマンドでも実行時間にばらつきがある&#34;&gt;同じコマンドでも実行時間にばらつきがある&lt;/h3&gt;

&lt;p&gt;ここでは特に &lt;code&gt;docker build&lt;/code&gt; を念頭におきますが、&lt;code&gt;docker build&lt;/code&gt; はキャッシュの有無であったり、キャッシュがあるにしてもどの layer までのキャッシュが使えるかといった場合によって実行時間はまちまちです。最適化の結果ベストケースでの実行時間は速くなっても、キャッシュが効く確率が低く、全体としての実行時間は遅くなる、ということもあるでしょう。&lt;/p&gt;

&lt;p&gt;そういった状況を正しく判断できるようにするには、継続的に実行時間を残しておき、ビジュアライズしておくと Fact Based に判断しやすいでしょう。&lt;/p&gt;

&lt;h3 id=&#34;job-単位での計測ではうまくいかないケースに対応したい&#34;&gt;Job 単位での計測ではうまくいかないケースに対応したい&lt;/h3&gt;

&lt;p&gt;先に掲載した Workflow は、実際は変更を検知したサービスに対してのみユニットテストや &lt;code&gt;docker build&lt;/code&gt; の実行を行なっています。変更がなかった場合は最後のビルドを使いまわしています。&lt;/p&gt;

&lt;p&gt;その場合、&lt;code&gt;docker build&lt;/code&gt; を実行したら数分かかるのに、スキップした場合は数秒で終わったりと、またばらつきが生まれてしまいます。なので、単純に Job 単位での実行時間を記録するのは適切でなくなります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;circle-dd-bench&lt;/code&gt; を使ったアプローチでは、&lt;code&gt;docker build&lt;/code&gt; を実行した時のみ計測・記録が行われるので、そういったばらつきを無視することができます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/circle-dd-bench&#34;&gt;circle-dd-bench&lt;/a&gt; を使うと Fact Based に CircleCI の Workflow を最適化していけるかもしれません。同じような問題を抱えている方は是非使ってみてください。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/WJBeFy3VcgY&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>CLI ツールを Go で書いて Docker イメージとしてリリースする</title>
      <link>https://blog.yuyat.jp/post/make-tools-in-go-and-release-as-docker-images/</link>
      <pubDate>Wed, 10 Oct 2018 01:30:00 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/make-tools-in-go-and-release-as-docker-images/</guid>
      <description>

&lt;p&gt;最近ようやく開発ツールとして Docker が手に馴染んできたので、タイトルの件も含めていくつか雑多に書きます。&lt;/p&gt;

&lt;h2 id=&#34;cli-ツールを-go-で書いて-docker-イメージとしてリリースする&#34;&gt;CLI ツールを Go で書いて Docker イメージとしてリリースする&lt;/h2&gt;

&lt;p&gt;コマンドラインツールを Go で書く、というのは以前からやっていて、主な理由としては「クロスコンパイルができるのでバイナリリリースが簡単」というのがありました。便利なので、クロスコンパイルから GitHub へのリリースを一発でやってくれるラッパーツールを書いたこともありました (一応動くものの、開発は非常に中途半端なところで止まってますが)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yuya_takeyama/items/ac200058f9a27a5db12f&#34;&gt;gox して ghr するツール ggallin 作った&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その後、2017 年に入って Docker で Multi-Stage Builds という機能が実装されてからは、&lt;code&gt;Dockerfile&lt;/code&gt; 内の build ステージで &lt;code&gt;go build&lt;/code&gt; したバイナリを最終的なステージから &lt;code&gt;COPY --from=build&lt;/code&gt; して使う、ということもやってきました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/develop/develop-images/multistage-build/&#34;&gt;Use multi-stage builds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この &lt;code&gt;COPY --from&lt;/code&gt; ですが、ドキュメントをよく見ると &lt;code&gt;COPY --from=nginx:latest&lt;/code&gt; などとすることで、外部のイメージも stage として利用することができると書いてあります。&lt;/p&gt;

&lt;p&gt;これを利用すると、&lt;code&gt;Dockerfile&lt;/code&gt; 内で必要なツールはこんな感じにインストールすることができるようになります。 (例は前の記事で紹介している &lt;a href=&#34;https://blog.yuyat.jp/post/guruguru-cache/&#34;&gt;guruguru-cache&lt;/a&gt; をインストールするもの)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;COPY --from=yuyat/guruguru-cache /usr/local/bin/guruguru-cache /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;guruguru-cache は Go で書かれていてシングルバイナリとしてビルドされているので、このように &lt;code&gt;$PATH&lt;/code&gt; の通ったところに &lt;code&gt;COPY&lt;/code&gt; してくるだけで使えるようになります。&lt;/p&gt;

&lt;p&gt;ただし、動的リンクされている場合は動かないことがあるので、静的リンクにする必要があります。以下の記事を参考にしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.wrouesnel.com/articles/Totally%20static%20Go%20builds/&#34;&gt;Totally static Go builds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前に &lt;a href=&#34;https://github.com/yuya-takeyama/circle-gh-tee&#34;&gt;Rust で書いたツール&lt;/a&gt; も同じやり方で手元で使ってたりするんですが、この時はその辺に気を使っていたわけではないので、たまたま動いているだけかもしれません。 (ビルドと実行が同じベースイメージで行われていれば普通に動くことも多い)&lt;/p&gt;

&lt;p&gt;最近 Webpacker 用の &lt;code&gt;Dockerfile&lt;/code&gt; で、ruby のイメージの中から &lt;code&gt;COPY --from=node&lt;/code&gt; で &lt;code&gt;node&lt;/code&gt; のバイナリを直接引っ張ってきているのをちょいちょい見ますが、Quipper で一番 Docker に詳しい &lt;a href=&#34;http://twitter.com/mtsmfm&#34;&gt;@mtsmfm&lt;/a&gt; さんに聞いたところ、「多分 ruby と node のベースイメージが近いからたまたま動いているだけで、手元で使うのはいいけど本番ではやるべきではないですね」とのような意見をもらって、「なるほど、確かに〜」と思ったのでした。 (確かにどちらも &lt;code&gt;buildpack-deps:stretch&lt;/code&gt; がベース。バージョンによっても違うかもですが)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docker-library/ruby/blob/ccacdf5eb9e69b6f249a890c87621679410e7d74/2.5/stretch/Dockerfile&#34;&gt;ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nodejs/docker-node/blob/11d4e7fb83a52801e177a08c12eeacaf41498a54/10/stretch/Dockerfile&#34;&gt;node&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あと言うまでもないとは思いますが、これはあくまでも &lt;code&gt;docker build&lt;/code&gt; 内で実行する開発ツール的なやつに有効なテクニックで、サーバやミドルウェアは素直で別コンテナで動かしてネットワークを通じてやり取りするのが良いでしょう (Apache と MySQL の両方を動かすようなイメージを作るべきではない)&lt;/p&gt;

&lt;h2 id=&#34;docker-hub-よりも-docker-cloud&#34;&gt;Docker Hub よりも Docker Cloud&lt;/h2&gt;

&lt;p&gt;というわけで最近は前よりも Docker イメージを作ることが増えて、ちょっと前までは Docker Hub を使っていました。&lt;/p&gt;

&lt;p&gt;でもビルドの進捗がよくわからんなー、と思って社内の Slack で文句を言っていたところ、これまた &lt;a href=&#34;http://twitter.com/mtsmfm&#34;&gt;@mtsmfm&lt;/a&gt; さんから「進捗は Docker Cloud の方がわかりやすい」ということだったのでそちらを使い始めました。&lt;/p&gt;

&lt;p&gt;名前はなんとなく知っていたものの、そこで初めて知ったのはどちらも Docker, Inc. が運営するサービスなんですね。しかも内部的にリポジトリのデータは共有されており、&lt;code&gt;docker push&lt;/code&gt; すると両方に同じイメージが表れるという不思議な作り。Docker Hub だと他人の public なイメージも閲覧できるのに対して、Docker Cloud は基本的に自分か所属する組織のイメージ以外は見えないので、Hub としての機能は持ってないようです。&lt;/p&gt;

&lt;p&gt;使ってみると UI 以外にも Automated Build が少しいい感じになっていて、Git の tag は &lt;code&gt;v1.2.3&lt;/code&gt; だったら Docker イメージの tag は &lt;code&gt;1.2.3&lt;/code&gt; というように先頭の v を取る、みたいなことも簡単にできるので便利です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>docker build 内の bundle install を最適化するために guruguru-cache というツールを作った</title>
      <link>https://blog.yuyat.jp/post/guruguru-cache/</link>
      <pubDate>Tue, 09 Oct 2018 01:10:00 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/guruguru-cache/</guid>
      <description>

&lt;p&gt;作りました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/guruguru-cache&#34;&gt;yuya-takeyama/guruguru-cache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;解決したい問題&#34;&gt;解決したい問題&lt;/h2&gt;

&lt;p&gt;Quipper では開発プラットフォームが Deis (OSS の Heroku クローン) から割と素な感じの Kubernetes へと変わったので、元々は Buildpack で行なっていたコンテナイメージのビルドはシェルスクリプト内で &lt;code&gt;docker build&lt;/code&gt; を直接実行して行うようになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://quipper.hatenablog.com/entry/future-with-kubernetes&#34;&gt;Kubernetes導入で実現したい世界とその先にあるMicroservices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Monorepo なので、Pull Request を出したりマージすると変更のあったサービスの Docker Image のビルドが一気に走るのですが、並列とはいえキューがたまりがちになってきたので、実行時間が気になり始めました。&lt;/p&gt;

&lt;h3 id=&#34;bundle-install-が長い&#34;&gt;&lt;code&gt;bundle install&lt;/code&gt; が長い&lt;/h3&gt;

&lt;p&gt;特に気になるのがこれです。Quipper の場合 Ruby で書かれたアプリが多いので主に Bundler ですが、Node.js の Yarn 等でも同様の問題があります。&lt;/p&gt;

&lt;p&gt;この問題に対するよく知られた対処として、「&lt;code&gt;Gemfile&lt;/code&gt;/&lt;code&gt;Gemfile.lock&lt;/code&gt; を先に &lt;code&gt;ADD&lt;/code&gt;/&lt;code&gt;COPY&lt;/code&gt; して &lt;code&gt;bundle install&lt;/code&gt; を実行したあとでアプリ全体を &lt;code&gt;ADD&lt;/code&gt;/&lt;code&gt;COPY&lt;/code&gt; する」というものがあります。
(以前は Ruby のオフィシャルイメージの中の &lt;code&gt;onbuild&lt;/code&gt; タグがついたものが同じようなことをしてくれましたが&lt;a href=&#34;https://github.com/docker-library/official-images/issues/2076&#34;&gt;いつの間にか deprecate されていた&lt;/a&gt;ようです)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kaiinui/items/5ec52437d114e364b7f0&#34;&gt;Docker で bundle install を爆速にする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;こうすることで、&lt;code&gt;Gemfile&lt;/code&gt;/&lt;code&gt;Gemfile.lock&lt;/code&gt; 以外のファイルに更新が起こった時点で Docker のレイヤーキャッシュが無効になり、&lt;code&gt;bundle install&lt;/code&gt; がゼロからになってしまう問題を避けられます。&lt;/p&gt;

&lt;p&gt;ですが、この場合も結局 &lt;code&gt;Gemfile&lt;/code&gt; に 1 gem 追加しただけでも &lt;code&gt;bundle install&lt;/code&gt; は最初から実行されて、特に &lt;code&gt;nokogiri&lt;/code&gt; のようなネイティブ拡張を含む gem のビルドに時間を取られてしまうことには変わりありません。&lt;/p&gt;

&lt;p&gt;これかを解決するには、&lt;code&gt;docker build&lt;/code&gt; 時に &lt;code&gt;bundle install&lt;/code&gt; したディレクトリ全体をキャッシュとして保持しておき、次回以降のビルドに引き継ぐ必要があります。&lt;/p&gt;

&lt;h2 id=&#34;guruguru-cache&#34;&gt;guruguru-cache&lt;/h2&gt;

&lt;p&gt;そこで作ったのが guruguru-cache です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/guruguru-cache&#34;&gt;yuya-takeyama/guruguru-cache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://circleci.com/docs/2.0/caching/&#34;&gt;CircleCI 2.0 のキャッシュシステム&lt;/a&gt;がシンプルで好きだったので、これと似たようなことがコマンドでできれば良いなと思って作りました。&lt;strong&gt;Circle&lt;/strong&gt; CI 由来なのでぐるぐるです。&lt;a href=&#34;https://www.youtube.com/watch?v=Ypx_A6No600&#34;&gt;乃木坂46のデビューシングル&lt;/a&gt;や&lt;a href=&#34;https://en.wikipedia.org/wiki/Guru_Guru&#34;&gt;ジャーマンロックバンド&lt;/a&gt;は関係ありません。&lt;/p&gt;

&lt;h3 id=&#34;必要なもの&#34;&gt;必要なもの&lt;/h3&gt;

&lt;p&gt;キャッシュファイルは S3 に保存するため、S3 バケットと、そバケットにアクセスできる IAM User 及びアクセスキーが必要です。現状は環境変数でしか渡せないので、以下の値を用意する必要があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AWS_REGION&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、必須ではありませんが、&lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/lifecycle-expire-general-considerations.html&#34;&gt;Object Expiration&lt;/a&gt; の設定をしておくと良いでしょう。&lt;/p&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;現状リリース済みのバイナリは用意していないので、&lt;code&gt;go get&lt;/code&gt; で自前ビルドするか、&lt;code&gt;docker build&lt;/code&gt; 用であれば latest の Docker イメージからコピーしてくるのが簡単です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# In Dockerfile
COPY --from=yuyat/guruguru-cache /usr/local/bin/guruguru-cache /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;キャッシュの保存&#34;&gt;キャッシュの保存&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ guruguru-cache store [flags] [cache key] [paths...]

Flags:
  -h, --help               help for store
      --s3-bucket string   S3 bucket to upload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一引数にキャッシュキーを指定し、第二引数以降にはキャッシュ対象のパスを複数指定できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ guruguru-cache store --s3-bucket=example-cache \
  &#39;gem-v1-{{ arch }}-{{ checksum &amp;quot;Gemfile.lock&amp;quot; }}&#39; \
  vendor/bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;キャッシュキーには CircleCI と同様のテンプレート記法が使えます。テンプレート記法についてはあとで別途説明します。&lt;/p&gt;

&lt;h3 id=&#34;キャッシュの復元&#34;&gt;キャッシュの復元&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ guruguru-cache restore [flags] [cache keys...]

Flags:
  -h, --help               help for restore
      --s3-bucket string   S3 bucket to upload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;キャッシュキーを複数指定することができます。順番にキャッシュを前方一致で探索し、見つかるまで次のキーにフォールバックしていきます。キャッシュが見つからなければ何もせず終了します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ guruguru-cache restore --s3-bucket=example-cache \
  &#39;gem-v1-{{ arch }}-{{ checksum &amp;quot;Gemfile.lock&amp;quot; }}&#39; \
  &#39;gem-v1-{{ arch }}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この例ではまず &lt;code&gt;Gemfile.lock&lt;/code&gt; のチェックサムが一致するキャッシュを探索します。これが見つかった場合、通常は gem が過不足なくキャッシュから復元されるので、&lt;code&gt;bundle install&lt;/code&gt; は一瞬で終わるはずです。 (もちろん実装依存ですが)&lt;/p&gt;

&lt;p&gt;チェックサムが一致するキャッシュが見つからなかった場合、2 番目の &lt;code&gt;gem-v1-{{ arch }}&lt;/code&gt; にフォールバックします。複数見つかった場合は作成日時が一番新しいものを取得します。この辺は CircleCI と同様の挙動にしたつもりです。&lt;/p&gt;

&lt;h3 id=&#34;キャッシュキーのテンプレート&#34;&gt;キャッシュキーのテンプレート&lt;/h3&gt;

&lt;p&gt;キャッシュキーには以下のテンプレート記法が使えます。まんま CircleCI です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{{ checksum &amp;quot;FILEPATH&amp;quot; }}&lt;/code&gt;: ファイルの MD5 チェックサム&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{{ arch }}&lt;/code&gt;: CPU アーキテクチャ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{{ epoch }}&lt;/code&gt;: UNIX タイムスタンプ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{{ .Environment.FOO }}&lt;/code&gt;: 環境変数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;{{ .Branch }}&lt;/code&gt; や &lt;code&gt;{{ .Revision }}&lt;/code&gt; のような CircleCI 固有の環境変数に依存したものはありません。CI 基盤で適宜取得して &lt;code&gt;docker build&lt;/code&gt; 時に &lt;code&gt;--build-arg&lt;/code&gt; として渡す、等する必要があります。&lt;/p&gt;

&lt;h2 id=&#34;デモ&#34;&gt;デモ&lt;/h2&gt;

&lt;p&gt;CircleCI 内で &lt;code&gt;docker build&lt;/code&gt; を行う例を以下に用意してみました。ファイルとして見るべきものは以下の 2 つです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/guruguru-cache-circleci-example/blob/master/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;キャッシュの復元 -&amp;gt; &lt;code&gt;bundle install&lt;/code&gt; -&amp;gt; キャッシュの保存となっていることがわかると思います&lt;/li&gt;
&lt;li&gt;CircleCI のジョブ本体のコンテナと Remote Docker とでキャッシュを共有できたら良いかなと思いましたが、実行してみたときは CPU アーキテクチャの微妙な違いによってうまく共有できませんでした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://circleci.com/gh/yuya-takeyama/guruguru-cache-circleci-example/4&#34;&gt;https://circleci.com/gh/yuya-takeyama/guruguru-cache-circleci-example/4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;現実のケースではテストの実行用と本番環境での実行用とでは必要な gem が微妙に異なると思うので、キャッシュを共有できてもそんなに嬉しくない気もします&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/guruguru-cache-circleci-example/blob/master/.circleci/config.yml&#34;&gt;.circleci/config.yml&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;guruguru-cache&lt;/code&gt; の実行に必要な環境変数を &lt;code&gt;--build-arg&lt;/code&gt; として渡しています&lt;/li&gt;
&lt;li&gt;CircleCI のジョブ本体のコンテナと Remote Docker とでキャッシュを共有できたら良いかなと思いましたが、実行してみたときは CPU アーキテクチャの微妙な違いによってうまく共有できませんでした&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://circleci.com/gh/yuya-takeyama/guruguru-cache-circleci-example/4&#34;&gt;https://circleci.com/gh/yuya-takeyama/guruguru-cache-circleci-example/4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;現実のケースではテストの実行用と本番環境での実行用とでは必要な gem が微妙に異なると思うので、キャッシュを共有できてもそんなに嬉しくない気もします&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ビルド時間の計測&#34;&gt;ビルド時間の計測&lt;/h3&gt;

&lt;p&gt;はじめに、初回のキャッシュなしの状態です。キャッシュを復元・保存するロジックは既に入っていますが、初回なので当然キャッシュがない状態です。コードはほぼ &lt;code&gt;rails new&lt;/code&gt; した直後のものです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://circleci.com/gh/yuya-takeyama/guruguru-cache-circleci-example/4&#34;&gt;https://circleci.com/gh/yuya-takeyama/guruguru-cache-circleci-example/4&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker build&lt;/code&gt;: 02:01&lt;/li&gt;
&lt;li&gt;&lt;code&gt;guruguru-cache restore&lt;/code&gt;: 約 1 秒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;guruguru-cache store&lt;/code&gt;: 約 10 秒&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次に、ネイティブ拡張を含む&lt;a href=&#34;https://github.com/yuya-takeyama/guruguru-cache-circleci-example/commit/bf53270f59062927496ded5f8304d76c34b8d4bc&#34;&gt;いくつかの gem を追加&lt;/a&gt;した状態で計測してみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://circleci.com/gh/yuya-takeyama/guruguru-cache-circleci-example/5&#34;&gt;https://circleci.com/gh/yuya-takeyama/guruguru-cache-circleci-example/5&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker build&lt;/code&gt;: 01:34&lt;/li&gt;
&lt;li&gt;&lt;code&gt;guruguru-cache restore&lt;/code&gt;: 約 15 秒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;guruguru-cache store&lt;/code&gt;: 約 20 秒&lt;/li&gt;
&lt;li&gt;ほとんどの gem はキャッシュから復元されるので、差分だけのインストールが行われていることがわかります&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libv8&lt;/code&gt; や &lt;code&gt;mini_racer&lt;/code&gt; 等の、ビルドが必要な gem がいくつか含まれていても、全体としては速くなっていることがわかります&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして、同じ gem を追加した状態だが、&lt;code&gt;guruguru-cache&lt;/code&gt; を一切使わないものです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://circleci.com/gh/yuya-takeyama/guruguru-cache-circleci-example/6&#34;&gt;https://circleci.com/gh/yuya-takeyama/guruguru-cache-circleci-example/6&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker build&lt;/code&gt;: 02:12&lt;/li&gt;
&lt;li&gt;&lt;code&gt;guruguru-cache&lt;/code&gt; にかかる時間はなし&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というわけで、これを見る限りでは &lt;code&gt;guruguru-cache&lt;/code&gt; を使うメリットはあると言えそうです。&lt;/p&gt;

&lt;p&gt;実際は &lt;code&gt;nokogiri&lt;/code&gt; のようなビルドに時間のかかる gem がどれだけ含まれるのかにも寄るし、レイヤーキャッシュによる &lt;code&gt;bundle install&lt;/code&gt; 自体のインストールがどれだけスキップされる場合だったり、レイヤーキャッシュはないが &lt;code&gt;guruguru-cache&lt;/code&gt; のキャッシュはそのまま存在してキャッシュの保存はスキップされるケースなど、色々パターンがあるので、もう少し長い目で計測・観察が必要そうです。&lt;/p&gt;

&lt;h2 id=&#34;今後改善したいポイント&#34;&gt;今後改善したいポイント&lt;/h2&gt;

&lt;h3 id=&#34;キャッシュのネームスペース&#34;&gt;キャッシュのネームスペース&lt;/h3&gt;

&lt;p&gt;単一のバケットに複数リポジトリのキャッシュを格納できるよう、ネームスペースの指定ができてはどうかと思っています。S3 上はパスの prefix になるだけなので、キャッシュキー自体に含めてもいいかもしれませんが、この後の設定ファイルも込みでやると便利かもしれません。&lt;/p&gt;

&lt;h3 id=&#34;設定ファイルへの対応&#34;&gt;設定ファイルへの対応&lt;/h3&gt;

&lt;p&gt;CircleCI のキャッシュでは、ビルドの設定ファイルのあちこちにキャッシュキーが散らばるので、一斉にキーを変更する必要があるときに煩雑になってしまう問題があると感じています。&lt;/p&gt;

&lt;p&gt;なので、&lt;code&gt;guruguru-cache&lt;/code&gt; 用の設定ファイル内にキーの情報をプリセットとして持たせておいて、コマンドからはそのプリセットを指定するだけにできると良いのではないかと考えています。イメージ的には以下のような感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# 設定ファイル
s3-bucket: example-cache
namespace: my-blog-app
presets:
  gem:
    store:
      key: gem-v1-{{ arch }}-{{ checksum &amp;quot;Gemfile.lock&amp;quot; }}
      paths:
        - vendor/bundle
    restore:
      keys:
        - gem-v1-{{ arch }}-{{ checksum &amp;quot;Gemfile.lock&amp;quot; }}
        - gem-v1-{{ arch }}
  npm:
    store:
      key: npm-v1-{{ arch }}-{{ checksum &amp;quot;yarn.lock&amp;quot; }}
      paths:
        - node_modules
    restore:
      keys:
        - npm-v1-{{ arch }}-{{ checksum &amp;quot;yarn.lock&amp;quot; }}
        - npm-v1-{{ arch }}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# Dockerfile
RUN guruguru-cache restore --preset gem
RUN bundle install --path=vendor/bundle
RUN guruguru-cache store --preset gem

RUN guruguru-cache restore --preset npm
RUN yarn install
RUN guruguru-cache store --preset npm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;アップロード-ダウンロードの高速化&#34;&gt;アップロード・ダウンロードの高速化&lt;/h3&gt;

&lt;p&gt;全然検証してませんが、RANGE リクエストを並列化させれば高速化できるんじゃないかと思っています。&lt;/p&gt;

&lt;h3 id=&#34;ファイル属性の維持&#34;&gt;ファイル属性の維持&lt;/h3&gt;

&lt;p&gt;キャッシュ展開時のファイル属性 (更新日時とか) は今のところ適当ですが、ちゃんと保持した方が良いケースが多いと思うのでちゃんとしたいです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes の ConfigMap を Immutable に管理する</title>
      <link>https://blog.yuyat.jp/post/kubernetes-immutable-configmap/</link>
      <pubDate>Sun, 01 Jul 2018 21:00:00 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/kubernetes-immutable-configmap/</guid>
      <description>

&lt;p&gt;Quipper では Microservices 基盤として Kubernetes によるクラスタを構築し、もうすぐ本番環境にリリースしようとしています。本当は &lt;a href=&#34;https://deis.com/docs/workflow/&#34;&gt;Deis Workflow&lt;/a&gt; で使う Kubernetes クラスタを既に本番で運用していますが、Deis なしでの運用に変えようとしているのが最近の状況です。&lt;/p&gt;

&lt;p&gt;そこら辺の背景は 2018/07/19 に行われる &lt;a href=&#34;https://techplay.jp/event/680406&#34;&gt;Quipper Product Meetup&lt;/a&gt; でお話しするとして、今は YAML の管理どうするかみたいなところから試行錯誤している状態で、基本的には Pull Request ベースでレビューしてマージされたらデプロイ、みたいなことをアプリでもクラスタでもやる感じになっています。&lt;/p&gt;

&lt;p&gt;今日は、その中でも &lt;code&gt;ConfigMap&lt;/code&gt; をどう扱うか、について Mutable/Immutable 2 つのアプローチについて実際に動く設定・スクリプト付きで紹介します。&lt;/p&gt;

&lt;p&gt;設定・スクリプトは全て GitHub のリポジトリに置いています: &lt;a href=&#34;https://github.com/yuya-takeyama/kubernetes-immutable-configmap-example&#34;&gt;yuya-takeyama/kubernetes-immutable-configmap-example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;Kubernetes における &lt;code&gt;ConfigMap&lt;/code&gt; は設定値や設定ファイルを保持するためのリソースで、&lt;code&gt;Deployment&lt;/code&gt; (&lt;code&gt;Pod&lt;/code&gt;) からは環境変数として読み込んだり、ファイルとして Volume にマウントしたりして使用します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ConfigMap&lt;/code&gt; を更新するだけでは、それを参照する &lt;code&gt;Deployment&lt;/code&gt; (&lt;code&gt;Pod&lt;/code&gt;) はロールアウトされず、環境変数等にも反映されません。ロールアウトするために何か工夫が必要です。&lt;/p&gt;

&lt;h2 id=&#34;元ネタ&#34;&gt;元ネタ&lt;/h2&gt;

&lt;p&gt;「&lt;code&gt;ConfigMap&lt;/code&gt; を immutable にせよ」というのは GitHub/Stack Overflow はじめ様々なところで言及されています。&lt;/p&gt;

&lt;p&gt;ですが、実際に動く例というものがなさそうなので、そういった言及を元に想像で作ってみたのが今回の例です。&lt;/p&gt;

&lt;p&gt;実際に参考にしたのは以下のコメントです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/pull/31701#issuecomment-252110430&#34;&gt;https://github.com/kubernetes/kubernetes/pull/31701#issuecomment-252110430&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Kubernetes/GKE/CNCF のメンバーである &lt;a href=&#34;https://github.com/bgrant0607&#34;&gt;Brian Grant&lt;/a&gt; によるコメント&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mutable-なアプローチ&#34;&gt;Mutable なアプローチ&lt;/h2&gt;

&lt;p&gt;まずはより素朴なアプローチとして Mutable なアプローチです。大まかには以下のような仕組みです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;環境変数を保持する &lt;code&gt;ConfigMap&lt;/code&gt; は常に同一のものを更新する&lt;/li&gt;
&lt;li&gt;それを参照する &lt;code&gt;Pod&lt;/code&gt; には &lt;code&gt;annotations&lt;/code&gt; として &lt;code&gt;ConfigMap&lt;/code&gt; ファイルのチェックサムを保持する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConfigMap&lt;/code&gt; に変更があると &lt;code&gt;Pod&lt;/code&gt; が持つチェックサムも変更されるので、&lt;code&gt;kubectl apply&lt;/code&gt; 時にロールアウトが実行される&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;deployment&#34;&gt;Deployment&lt;/h3&gt;

&lt;p&gt;注目すべきは以下の 2 点です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;環境変数は &lt;code&gt;envFrom&lt;/code&gt; を使って &lt;code&gt;nginx-config&lt;/code&gt; という &lt;code&gt;ConfigMap&lt;/code&gt; を参照している&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pod&lt;/code&gt; の &lt;code&gt;annotations&lt;/code&gt; にはチェックサムを保持するためのプレースホルダ &lt;code&gt;&amp;quot;${config_checksum}&amp;quot;&lt;/code&gt; を含む

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;envsubst&lt;/code&gt; で埋め込む前提&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx
  namespace: cm-deploy-mutable
spec:
  replicas: 1
  selector:
    matchLabels:
      run: nginx
  template:
    metadata:
      labels:
        run: nginx
      annotations:
        yuyat.jp/configmap.checksum.nginx-config: &amp;quot;${config_checksum}&amp;quot;
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: nginx-config
        image: nginx:alpine
        name: nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configmap&#34;&gt;ConfigMap&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ConfigMap&lt;/code&gt; は &lt;code&gt;APP_VERSION=1&lt;/code&gt; という値を保持するだけのプレーンな YAML なのでここでは割愛。&lt;/p&gt;

&lt;h3 id=&#34;デプロイスクリプト&#34;&gt;デプロイスクリプト&lt;/h3&gt;

&lt;p&gt;事前に &lt;code&gt;ConfigMap&lt;/code&gt; ファイルの SHA-1 チェックサムを取っておき、それを &lt;code&gt;envsubst&lt;/code&gt; を使って &lt;code&gt;Deployment&lt;/code&gt; に埋め込んでいます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
config_checksum=$(shasum mutable/nginx-config.cm.yaml | awk &#39;{ print $1 }&#39;)

kubectl apply --record -n cm-deploy-mutable \
  -f mutable/cm-deploy-mutable.ns.yaml \
  -f mutable/nginx-config.cm.yaml \
  -f &amp;lt;(cat mutable/nginx.deploy.yaml.tpl | config_checksum=$config_checksum envsubst &#39;$config_checksum&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;デプロイしてみる&#34;&gt;デプロイしてみる&lt;/h3&gt;

&lt;p&gt;初回はそれぞれのリソースが生成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./mutable/deploy.sh
namespace &amp;quot;cm-deploy-mutable&amp;quot; created
configmap &amp;quot;nginx-config&amp;quot; created
deployment &amp;quot;nginx&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で環境変数 &lt;code&gt;APP_VERSION&lt;/code&gt; には &lt;code&gt;1&lt;/code&gt; がセットされています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./mutable/version.sh
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何も変更せずに再度デプロイしても、何も起こりません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./mutable/deploy.sh
namespace &amp;quot;cm-deploy-mutable&amp;quot; configured
configmap &amp;quot;nginx-config&amp;quot; unchanged
deployment &amp;quot;nginx&amp;quot; unchanged
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;APP_VERSION&lt;/code&gt; を &lt;code&gt;2&lt;/code&gt; に変更してデプロイすると、ロールアウトが行われます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./mutable/deploy.sh
namespace &amp;quot;cm-deploy-mutable&amp;quot; configured
configmap &amp;quot;nginx-config&amp;quot; configured
deployment &amp;quot;nginx&amp;quot; configured
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナ内の環境変数も正常に変更されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./mutable/version.sh
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mutable-なアプローチの問題点&#34;&gt;Mutable なアプローチの問題点&lt;/h3&gt;

&lt;p&gt;ここまでは上手くいっていますが、問題となるのはロールバックする時です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl rollout undo deploy/nginx -n cm-deploy-mutable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で環境変数を確認すると、&lt;code&gt;2&lt;/code&gt; のままで、元に戻っていないことがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./mutable/version.sh
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ロールバックされるのはあくまでも &lt;code&gt;Deployment&lt;/code&gt; なので、それにひもづく &lt;code&gt;ConfigMap&lt;/code&gt; が変わらない以上は当然の結果です。&lt;/p&gt;

&lt;p&gt;ですが、環境変数等の設定値も含めてロールバックしたい場合には困りますね。&lt;/p&gt;

&lt;h2 id=&#34;immutable-なアプローチ&#34;&gt;Immutable なアプローチ&lt;/h2&gt;

&lt;p&gt;Mutable なアプローチの問題点を解決するための Immutable なアプローチは以下のようなものです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;環境変数を保持する &lt;code&gt;ConfigMap&lt;/code&gt; の name には suffix としてチェックサムを不可する

&lt;ul&gt;
&lt;li&gt;内容が変わると新しいチェックサムを持った &lt;code&gt;ConfigMap&lt;/code&gt; を毎回新しく作成する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pod&lt;/code&gt; からもそのチェックサム付きの名前で参照する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConfigMap&lt;/code&gt; に変更があると &lt;code&gt;Pod&lt;/code&gt; 参照する &lt;code&gt;ConfigMap&lt;/code&gt; が毎回変わるので、&lt;code&gt;kubectl apply&lt;/code&gt; 時にロールアウトが実行される&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;deployment-1&#34;&gt;Deployment&lt;/h3&gt;

&lt;p&gt;Mutable なものとだいたい似ていますが、差分は以下の 2 点です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;チェックサムを保持する &lt;code&gt;annotations&lt;/code&gt; を削除

&lt;ul&gt;
&lt;li&gt;これは敢えて持たせたままにするのもありだと思います&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;envFrom&lt;/code&gt; で参照する &lt;code&gt;ConfigMap&lt;/code&gt; の名前の suffix 部分がプレースホルダになっている

&lt;ul&gt;
&lt;li&gt;やはり &lt;code&gt;envsubst&lt;/code&gt; で値を埋め込む前提&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx
  namespace: cm-deploy-immutable
spec:
  replicas: 1
  selector:
    matchLabels:
      run: nginx
  template:
    metadata:
      labels:
        run: nginx
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: &amp;quot;nginx-config-${config_checksum}&amp;quot;
        image: nginx:alpine
        name: nginx

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;configmap-1&#34;&gt;ConfigMap&lt;/h3&gt;

&lt;p&gt;Mutable なアプローチではプレーンな YAML でしたが、こちらでは &lt;code&gt;ConfigMap&lt;/code&gt; も &lt;code&gt;envsubst&lt;/code&gt; による値の埋め込みを行います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: v1
data:
  APP_VERSION: &amp;quot;1&amp;quot;
kind: ConfigMap
metadata:
  name: nginx-config-${config_checksum}
  namespace: cm-deploy-immutable
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;デプロイスクリプト-1&#34;&gt;デプロイスクリプト&lt;/h3&gt;

&lt;p&gt;事前に &lt;code&gt;ConfigMap&lt;/code&gt; ファイル (テンプレート) のチェックサムを取るのは同じですが、&lt;code&gt;Deployment&lt;/code&gt; だけでなく &lt;code&gt;ConfigMap&lt;/code&gt; にも &lt;code&gt;envsubst&lt;/code&gt; での値の埋め込みを行います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
config_checksum=$(shasum immutable/nginx-config.cm.yaml.tpl | awk &#39;{ print $1 }&#39;)

kubectl apply --record -n cm-deploy-immutable \
  -f immutable/cm-deploy-immutable.ns.yaml \
  -f &amp;lt;(cat immutable/nginx-config.cm.yaml.tpl | config_checksum=$config_checksum envsubst &#39;$config_checksum&#39;) \
  -f &amp;lt;(cat immutable/nginx.deploy.yaml.tpl | config_checksum=$config_checksum envsubst &#39;$config_checksum&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;デプロイしてみる-1&#34;&gt;デプロイしてみる&lt;/h3&gt;

&lt;p&gt;初回はやはりそれぞれのリソースが生成されます。&lt;code&gt;ConfigMap&lt;/code&gt; の名前にチェックサムが含まれることがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./immutable/deploy.sh
namespace &amp;quot;cm-deploy-immutable&amp;quot; created
configmap &amp;quot;nginx-config-12db160438b100c95eb77c821899f524d6027405&amp;quot; created
deployment &amp;quot;nginx&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境変数は当然ちゃんとセットされています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./immutable/version.sh
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ConfigMap&lt;/code&gt; に変更がない状態で再度適用しても、何も変更が起こらないのは Mutable なときと同じです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./immutable/deploy.sh
namespace &amp;quot;cm-deploy-immutable&amp;quot; configured
configmap &amp;quot;nginx-config-12db160438b100c95eb77c821899f524d6027405&amp;quot; unchanged
deployment &amp;quot;nginx&amp;quot; unchanged
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで &lt;code&gt;APP_VERSION&lt;/code&gt; を &lt;code&gt;2&lt;/code&gt; に変更してデプロイすると、今度はロールアウトが行われます。&lt;code&gt;ConfigMap&lt;/code&gt; は新しく作られていることがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./immutable/deploy.sh
namespace &amp;quot;cm-deploy-immutable&amp;quot; configured
configmap &amp;quot;nginx-config-b6fe7e2f2edca16c3778836541a399245ca2372e&amp;quot; created
deployment &amp;quot;nginx&amp;quot; configured
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナ内の環境変数も正常に変更されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./immutable/version.sh
2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ロールバックしてみる&#34;&gt;ロールバックしてみる&lt;/h3&gt;

&lt;p&gt;Mutable なアプローチで問題になったロールバックをこちらでもやってみます。そちらではロールバックしたにもかかわらず、&lt;code&gt;APP_VERSION&lt;/code&gt; は &lt;code&gt;2&lt;/code&gt; のままで元に戻ってくれませんでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl rollout undo deploy/nginx -n cm-deploy-immutable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでコンテナ内の環境変数を確認すると、見事 &lt;code&gt;1&lt;/code&gt; に戻っています！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./immutable/version.sh
1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ロールバックすることで &lt;code&gt;Pod&lt;/code&gt; が参照する &lt;code&gt;ConfigMap&lt;/code&gt; が一つ前のものに書き換わり、その &lt;code&gt;ConfigMap&lt;/code&gt; には作成時のままの値が入っているので、今度は &lt;code&gt;ConfigMap&lt;/code&gt; ごとロールバックされました。&lt;/p&gt;

&lt;p&gt;今回は &lt;code&gt;ConfigMap&lt;/code&gt; のみの変更でしたが、&lt;code&gt;Deployment&lt;/code&gt; に同時に変更を加えていた場合、その変更もアトミックになるのでロールバックも同様にアトミックに行われることになります。&lt;/p&gt;

&lt;h3 id=&#34;immutable-なアプローチの問題点&#34;&gt;Immutable なアプローチの問題点&lt;/h3&gt;

&lt;p&gt;Mutable なアプローチで問題になったロールバックも上手く行きましたが、こちらは &lt;code&gt;ConfigMap&lt;/code&gt; に変更があるごとに毎回新しく &lt;code&gt;ConfigMap&lt;/code&gt; が作られてしまいます。&lt;/p&gt;

&lt;p&gt;気にせず放置、というのも一つのやり方だと思いますが、気になるのであれば以下のような手順で対処することが考えられます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConfigMap&lt;/code&gt; には &lt;code&gt;label&lt;/code&gt; で共通の値 (&lt;code&gt;nginx-config&lt;/code&gt; 等) を持たせておく&lt;/li&gt;
&lt;li&gt;&lt;code&gt;label&lt;/code&gt; に紐付く &lt;code&gt;ConfigMap&lt;/code&gt; を全て取得し、&lt;code&gt;metadata&lt;/code&gt; が持つ &lt;code&gt;creationTimestamp&lt;/code&gt; でソートし、新しいものいくつかを残して残りは全て削除する

&lt;ul&gt;
&lt;li&gt;ということを &lt;code&gt;CronJob&lt;/code&gt; とかでやると良いのかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Pod&lt;/code&gt; にとっての &lt;code&gt;ReplicaSet&lt;/code&gt; のようなものが &lt;code&gt;ConfigMap&lt;/code&gt; にも欲しいですね。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize&#34;&gt;kustomize&lt;/a&gt; で実現する方法もあるっぽいのでそれはまた今度調べてみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize/tree/730597b77e0a3a4d4c73668e5b1b414c13c76f5a/examples/helloWorld#how-this-works-with-kustomize&#34;&gt;https://github.com/kubernetes-sigs/kustomize/tree/730597b77e0a3a4d4c73668e5b1b414c13c76f5a/examples/helloWorld#how-this-works-with-kustomize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、Quipper では Kubernetes を使って最高の Microservices 基盤を作りたい SRE を大募集中です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quipper.com/career/Japan/&#34;&gt;https://www.quipper.com/career/Japan/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Oculus Go で Kindle の電子書籍を寝ながら読む</title>
      <link>https://blog.yuyat.jp/post/oculus-go-kindle/</link>
      <pubDate>Mon, 07 May 2018 04:30:00 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/oculus-go-kindle/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.oculus.com/go/&#34;&gt;Oculus Go&lt;/a&gt; を買いました。64GB のものが 29,800 円税込送料なしという圧倒的格安なので、VR に興味のある方は是非買いましょう。Amazon で売られている転売品はくれぐれも買わないように。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.moguravr.com/netflix-oculus-go/&#34;&gt;寝転んでNetflixを大画面で観る方法（Oculus Goユーザー必見）&lt;/a&gt;という記事を読んで、寝ながらの Netflix の体験がとにかく良かったので、Kindle の書籍も同じように読めないかやってみました。&lt;/p&gt;

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Oculus Go 標準のブラウザで &lt;a href=&#34;https://read.amazon.co.jp/&#34;&gt;Kindle Cloud Reader&lt;/a&gt; を Request desktop mode で開く&lt;/li&gt;
&lt;li&gt;日本語の書籍は基本的に Kindle Cloud Reader 自体の制約で開けない&lt;/li&gt;
&lt;li&gt;漫画は開けるが、読み込みが遅かったり、画面サイズの都合で見開き表示ができなかったりと体験が良くない&lt;/li&gt;
&lt;li&gt;洋書であれば割と普通に読める&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;寝ながら本が読みたい&#34;&gt;寝ながら本が読みたい&lt;/h2&gt;

&lt;p&gt;前から常々寝ながら Kindle 書籍が読みたいと思っていて、去年はそのために iPad 用のアームを買っていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.yuyat.jp/post/best-buys-2017/&#34;&gt;プログラマが 2017 年に買って良かったもの&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;読むこと自体は寝ながらできるものの、ページをめくる時には手を上に伸ばさないといけないのが煩わしく、リモコンでの操作も難しそうなので、諦めていました。&lt;/p&gt;

&lt;p&gt;が、そこで Oculus Go です。&lt;/p&gt;

&lt;h2 id=&#34;oculus-go-のブラウザで-kindle-cloud-reader-を開く&#34;&gt;Oculus Go のブラウザで Kindle Cloud Reader を開く&lt;/h2&gt;

&lt;p&gt;Kindle Cloud Reader はブラウザで Kindle の電子書籍を読める Web アプリです。&lt;/p&gt;

&lt;p&gt;Oculus Go のブラウザそのままで開くと、非対応ということで Android アプリのダウンロードを促されますが、Oculus Go では Android アプリを動かすことはできません。&lt;/p&gt;

&lt;p&gt;標準ブラウザのブラウジングウィンドウ右上にある Request desktop mode ボタンを有効にした上で &lt;a href=&#34;https://read.amazon.co.jp/&#34;&gt;Kindle Cloud Reader&lt;/a&gt; を開くことで、うまくアクセスできます。&lt;/p&gt;

&lt;p&gt;ただし、キャッシュか何かの都合？でうまく開けないことがあり、そういうときは &lt;code&gt;?foo&lt;/code&gt; といったクエリを URL 末尾に付加すると開けたり開けなかったりします。&lt;/p&gt;

&lt;p&gt;また、ブラウザを開いた状態で寝そべって、コントローラーを上に向けて Oculus ボタンを長押しすれば天井にブラウザを表示することができます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.yuyat.jp/images/oculus-go-kindle/kindle.png&#34; width=&#34;672&#34; height=&#34;670&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;制約&#34;&gt;制約&lt;/h2&gt;

&lt;h3 id=&#34;日本語書籍が読めない&#34;&gt;日本語書籍が読めない&lt;/h3&gt;

&lt;p&gt;日本語の書籍は基本的には読めません。全てが全て読めないというわけではなさそうですが、手元で試した限りは読めるものはありませんでした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mogi2fruits.net/blog/webservice-application/kindle/2826/&#34;&gt;Kindle Cloud Reader でコミック・雑誌以外の”和書”が読めないわけでもない！試してみる価値あり！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;offline-download-ができない&#34;&gt;Offline download ができない&lt;/h3&gt;

&lt;p&gt;Kindle Cloud Reader にはダウンロードしておくことで、オフラインでも書籍を読める機能があります。ざっと調べた感じ Application Cache API で実装しているようです。&lt;/p&gt;

&lt;p&gt;ですが、Oculus Go 標準のブラウザでは Application Cache API が使えないのか、ダウンロードがうまくいかないようです。&lt;/p&gt;

&lt;p&gt;それで何が問題かというと、漫画を読むときは読み込み時間がかなりかかることになり、ネットワーク環境にもよるかもしれませんが、快適に読むことが難しくなります。&lt;/p&gt;

&lt;h3 id=&#34;見開き表示ができない&#34;&gt;見開き表示ができない&lt;/h3&gt;

&lt;p&gt;これはブラウザの画面サイズの問題だと思うのですが、漫画の見開き表示ができませんでした。Mac のブラウザで試した感じでは画面サイズを十分に広げさえすれば見開き表示になるようです。&lt;/p&gt;

&lt;p&gt;Oculus Go 標準のブラウザでは画面サイズは幅を 3 段階に切り替えられますが、任意のサイズに変更することはできないようです。選択できる最大の幅を選択しても見開き表示にならないので、どうやら難しそうです。&lt;/p&gt;

&lt;h2 id=&#34;結論としてはほぼ洋書専用&#34;&gt;結論としてはほぼ洋書専用&lt;/h2&gt;

&lt;p&gt;とういわけでまともに読めるのは活字の洋書だけということになりました。&lt;/p&gt;

&lt;h2 id=&#34;その他にも試してみた&#34;&gt;その他にも試してみた&lt;/h2&gt;

&lt;h3 id=&#34;青空文庫&#34;&gt;青空文庫&lt;/h3&gt;

&lt;p&gt;ブラウザ上で読む書籍といえばやはり青空文庫でしょう。&lt;/p&gt;

&lt;p&gt;こちらはいわゆる電子書籍のような UI はないものの、普通に読むことができました。やはり正しくマークアップされた HTML はこういうとき強いですね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.yuyat.jp/images/oculus-go-kindle/aozora.png&#34; width=&#34;670&#34; height=&#34;666&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;amazon-prime-video&#34;&gt;Amazon Prime Video&lt;/h3&gt;

&lt;p&gt;書籍ではないですが、同じ Amazon ということで Amazon Prime Video も試してみましたが、これは普通に視聴できました。&lt;/p&gt;

&lt;p&gt;アプリではなくとも、再生さえできれば Netflix アプリと同じく最高の体験が得られます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Kindle は割と残念な感じでしたが、ブラウザベースの電子書籍サービスは試してみる価値が大いにあるでしょう。&lt;/p&gt;

&lt;p&gt;自分では試せてないですが、Windows 機を持っているのであれば、&lt;a href=&#34;https://bigscreenvr.com/&#34;&gt;Bigscreen&lt;/a&gt; 上で &lt;a href=&#34;https://www.amazon.co.jp/dp/B011UEHYWQ&#34;&gt;Kindle for Windows&lt;/a&gt; を開いてみるというのもいいかもしれません。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B078MQQJPZ&amp;linkId=3c1b7ebb75d985e65a7231323224f485&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0184N7WWS&amp;linkId=1bf535dc833fa92a3a33c2a213f3bdb2&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>bundle install には --clean を指定する (特に Circle CI では)</title>
      <link>https://blog.yuyat.jp/post/bundle-install-clean/</link>
      <pubDate>Mon, 16 Apr 2018 21:28:11 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/bundle-install-clean/</guid>
      <description>

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt; を &lt;code&gt;--clean&lt;/code&gt; オプション付きで実行することで、もう使っていない gem や古いバージョンの gem が削除されます。&lt;/p&gt;

&lt;p&gt;さもないと、Circle CI 上における Bundler のキャッシュの restore はどんどん遅くなります。&lt;/p&gt;

&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;

&lt;p&gt;この記事では Circle CI 2.0 において、&lt;code&gt;store_cache&lt;/code&gt; と &lt;code&gt;restore_cache&lt;/code&gt; を使って、Bundler の gem をキャッシュしているプロジェクトを対象としています。&lt;/p&gt;

&lt;h2 id=&#34;キャッシュの-restore-が遅い&#34;&gt;キャッシュの restore が遅い！！&lt;/h2&gt;

&lt;p&gt;ある日ふと、Circle CI におけるキャッシュの restore にすごく時間がかかっていることに気づきました。&lt;/p&gt;

&lt;p&gt;その時のプロジェクトにおいては Bundler のキャッシュだけでなんと &lt;strong&gt;1.2 GB&lt;/strong&gt;、時間にして &lt;strong&gt;2 分&lt;/strong&gt; もかかっていました。
そのプロジェクトは Workflow が三段階になっていたので、全体で 2 x 3 = &lt;strong&gt;6 分&lt;/strong&gt; もキャッシュの restore にかかっていることになります。&lt;/p&gt;

&lt;p&gt;素の状態から &lt;code&gt;bundle install&lt;/code&gt; はもっともっと時間がかかるので、これでも意味なくはないけど、もっと速くしたいですね。&lt;/p&gt;

&lt;h2 id=&#34;起きていた問題&#34;&gt;起きていた問題&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt; では、&lt;code&gt;Gemfile&lt;/code&gt; から削除された gem であったり、バージョンアップ前の古い gem を削除することなく、ディレクトリ中に保持します。&lt;/p&gt;

&lt;p&gt;そのため、プロジェクトを続けていると、主に gem をアップデートするごとに、もう使っていない gem がどんどん増えて行くことになります。&lt;/p&gt;

&lt;p&gt;Circle CI の場合、ディレクトリ内を丸ごとキャッシュするので、gem のアップデート時にも古いバージョンが残ったまま、また新たにキャッシュを store し直すことになるため、キャッシュが時間を追うごとに肥大化します。&lt;/p&gt;

&lt;h2 id=&#34;キャッシュをクリアしてみる&#34;&gt;キャッシュをクリアしてみる&lt;/h2&gt;

&lt;p&gt;とりあえずキャッシュキーを変更することで、丸ごとキャッシュをクリアしてみました。&lt;/p&gt;

&lt;p&gt;キャッシュの設定は以下のようになっていました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-api-bundle-{{ arch }}-{{ checksum &amp;quot;Gemfile.lock&amp;quot; }}
            - v1-api-bundle-
      - run: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3
      - save_cache:
          key: v1-api-bundle-{{ arch }}-{{ checksum &amp;quot;Gemfile.lock&amp;quot; }}
          paths:
            - ~/api/vendor/bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;キーの prefix の &lt;code&gt;v1-&lt;/code&gt; を &lt;code&gt;v2-&lt;/code&gt; に変更することで、キャッシュがヒットしなくなるので、とりあえずキャッシュがクリアされました。&lt;/p&gt;

&lt;p&gt;一度キャッシュをゼロから再生成した後、&lt;code&gt;restore_cache&lt;/code&gt; を確認したところ、ファイルサイズが &lt;strong&gt;154MB&lt;/strong&gt;、restore にかかる時間は &lt;strong&gt;11 秒&lt;/strong&gt; と、大幅に改善されました。&lt;/p&gt;

&lt;h2 id=&#34;別の方法を検討してみる&#34;&gt;別の方法を検討してみる&lt;/h2&gt;

&lt;p&gt;とりあえずキャッシュをクリアすることで restore の時間を大幅に改善することはわかりましたが、いつのまにか遅くなっていって、気づいた頃に手動でクリアする、というのはダルいですね。&lt;/p&gt;

&lt;p&gt;というわけでいいオプションが Bundler にないものかと &lt;code&gt;bundle install --help&lt;/code&gt; したところ、良さそうななオプションが見つかりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--clean
       On finishing the installation Bundler is going to remove any gems not present in the current Gemfile(5). Don&#39;t worry, gems currently in use will not be removed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こちらが意図している通りの挙動なのか、試してみましょう。&lt;/p&gt;

&lt;p&gt;まずは以下のような &lt;code&gt;Gemfile&lt;/code&gt; を用意します。あとでアップデートするために、あえて現時点でやや古いバージョンを指定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;source &#39;https://rubygems.org&#39;

gem &#39;concurrent-ruby&#39;, &#39;1.0.0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で &lt;code&gt;bundle install --path=vendor/bundle&lt;/code&gt; し、ディレクトリ内をチェックします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle install --path=vendor/bundle
Fetching gem metadata from https://rubygems.org/..
Resolving dependencies...
Using bundler 1.16.1
Fetching concurrent-ruby 1.0.0
Installing concurrent-ruby 1.0.0
Bundle complete! 1 Gemfile dependency, 2 gems now installed.
Bundled gems are installed into `./vendor/bundle`

$ ls -l vendor/bundle/ruby/2.5.0/gems/
total 0
drwxr-xr-x  6 yuya  staff  204 Apr 16 21:24 concurrent-ruby-1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここまではいいですが、ここで &lt;code&gt;Gemfile&lt;/code&gt; 中のバージョンを &lt;code&gt;&#39;1.0.5&#39;&lt;/code&gt; に変えてもう一度 &lt;code&gt;bundle install&lt;/code&gt; し、もう一度ディレクトリの中身を確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle install --path=vendor/bundle
Fetching gem metadata from https://rubygems.org/..
Resolving dependencies...
Using bundler 1.16.1
Using concurrent-ruby 1.0.5 (was 1.0.0)
Bundle complete! 1 Gemfile dependency, 2 gems now installed.
Bundled gems are installed into `./vendor/bundle`

$ ls -l vendor/bundle/ruby/2.5.0/gems/
total 0
drwxr-xr-x  6 yuya  staff  204 Apr 16 23:10 concurrent-ruby-1.0.0
drwxr-xr-x  6 yuya  staff  204 Apr 16 23:09 concurrent-ruby-1.0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;やはりバージョン違いの同一 gem が重複してしまいました。&lt;/p&gt;

&lt;p&gt;ここで &lt;code&gt;--clean&lt;/code&gt; オプション付きでやってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bundle install --path=vendor/bundle --clean
Using bundler 1.16.1
Using concurrent-ruby 1.0.5
Bundle complete! 1 Gemfile dependency, 2 gems now installed.
Bundled gems are installed into `./vendor/bundle`
Removing concurrent-ruby (1.0.0)

$ ls -l vendor/bundle/ruby/2.5.0/gems/
total 0
drwxr-xr-x  6 yuya  staff  204 Apr 16 23:13 concurrent-ruby-1.0.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;古いバージョンが消えました！&lt;/p&gt;

&lt;p&gt;なお、一度 &lt;code&gt;--clean&lt;/code&gt; で実行すると、設定が &lt;code&gt;.bundle/config&lt;/code&gt; に保存され、次回以降は &lt;code&gt;--clean&lt;/code&gt; なしでも同じ挙動になるようです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Ruby/Bundler ではこのようになっていましたが、他のパッケージマネージャーでも同様の問題には気をつけた方が良いでしょう。&lt;/p&gt;

&lt;p&gt;JavaScript における &lt;code&gt;yarn&lt;/code&gt; はデフォルトで同じような挙動になるので、気にする必要はないと思います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--path&lt;/code&gt; を指定している場合は基本的に思考停止で &lt;code&gt;--clean&lt;/code&gt; を指定するのが良いでしょう。&lt;/p&gt;

&lt;p&gt;逆に &lt;code&gt;--path&lt;/code&gt; を指定せずに、グローバルに gem を共有している場合はおそらく &lt;code&gt;--clean&lt;/code&gt; を使わない方が良いと思います。意図せず別プロジェクトではまだ使っている gem を消しちゃうので。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>プログラマが 2017 年に買って良かったもの</title>
      <link>https://blog.yuyat.jp/post/best-buys-2017/</link>
      <pubDate>Mon, 01 Jan 2018 06:00:00 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/best-buys-2017/</guid>
      <description>

&lt;p&gt;あけましておめでとうございます。&lt;/p&gt;

&lt;p&gt;2016 年の記事は思いの外読まれたおかげで &lt;a href=&#34;http://amzn.to/2ElqIwx&#34;&gt;Anova&lt;/a&gt; が買えたので、今年も書いてみます。&lt;/p&gt;

&lt;p&gt;傾向として、去年は引越しに伴った生活関係の買い物が多かったですが、その辺の買い物は落ち着いて、今年は自宅の作業環境周りでの買い物が多かったように思います。&lt;/p&gt;

&lt;h2 id=&#34;作業環境編&#34;&gt;作業環境編&lt;/h2&gt;

&lt;h3 id=&#34;philips-4k対応-43型ワイド液晶ディスプレイ-bdm4350uc-11-http-amzn-to-2coo5f5&#34;&gt;&lt;a href=&#34;http://amzn.to/2Coo5f5&#34;&gt;Philips 4K対応 43型ワイド液晶ディスプレイ BDM4350UC/11&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01D9FP20A&amp;linkId=4479882176573af57d5302439a714c93&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;今年の買い物としては一番の大物の部類です。&lt;/p&gt;

&lt;p&gt;元々 Apple の Thunderbolt Display (27 インチ) を使っていたんですが、モニターアームを取り付けようとしてる最中の&lt;a href=&#34;http://twilog.org/yuya_takeyama/date-170514&#34;&gt;悲しい事故&lt;/a&gt;でお亡くなりになってしまっていました。&lt;/p&gt;

&lt;p&gt;リビングのテレビ (39 インチ) よりも大きいものを机に置くのはどうか、という思いがあって長いこと放置してましたが、いろんな人の評価を見ているうちに買ってました。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ある会社のエンジニアに、「4Kディスプレイは必要か？」と聞いて回ったら、「まあ、あれば嬉しいですけど。。」くらいの温度感だった。でも、実際に買い与えてみたら、ほぼ全員が「すごい！ぜんぜん違う！」というような感想になった。人間は、頭で想像するだけでは「一覧性」の重要さが理解できない&lt;/p&gt;&amp;mdash; fromdusktildawn (@fromdusktildawn) &lt;a href=&#34;https://twitter.com/fromdusktildawn/status/877699851751800832?ref_src=twsrc%5Etfw&#34;&gt;June 22, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;別候補としてはもう少し小さいサイズの曲面ディスプレイというのもありましたが、まだ全体的に高かったのと、仕事で React Native の開発もするようになって、単純に画面の広さが欲しくなったのでこちらにしました。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;快適に React Native 開発できる画面サイズ手に入った &lt;a href=&#34;https://t.co/NzJls6vf2l&#34;&gt;pic.twitter.com/NzJls6vf2l&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yuya Takeyama ◢͟￨⁴⁶ (@yuya_takeyama) &lt;a href=&#34;https://twitter.com/yuya_takeyama/status/930103679478145024?ref_src=twsrc%5Etfw&#34;&gt;November 13, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;結果すごく満足しています。&lt;/p&gt;

&lt;h3 id=&#34;エルゴトロン-lx-デスクマウント-モニターアーム-ホワイト-45-490-216-http-amzn-to-2csegwe&#34;&gt;&lt;a href=&#34;http://amzn.to/2CsegwE&#34;&gt;エルゴトロン LX デスクマウント モニターアーム ホワイト 45-490-216&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01FW15TV6&amp;linkId=36c528bca8655766b12234bf9bce4f26&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;デカいディスプレイの購入に伴って、机を広く使えるように書いました。&lt;/p&gt;

&lt;p&gt;机の上は割と散らかっていて Mac mini、Google Home、電源タップの他に、キーボード (楽器の方) とかも置いてますが、問題なく作業スペースを確保できています。&lt;/p&gt;

&lt;p&gt;このアームですが、すごく気に入ったのでもう一つ買ってしまいました。僕の机はリビングの隅っこ背を向ける形で置いてるんですが、テレビも机にアームで設置するようにしました。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;PC のモニターに続いてテレビも机にアームで設置するようにした。重量が机の片側に寄っててバランス悪いから足もう一本要りそう &lt;a href=&#34;https://t.co/bjZi0cNWkp&#34;&gt;pic.twitter.com/bjZi0cNWkp&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yuya Takeyama ◢͟￨⁴⁶ (@yuya_takeyama) &lt;a href=&#34;https://twitter.com/yuya_takeyama/status/946978408059113473?ref_src=twsrc%5Etfw&#34;&gt;December 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;(40 インチ超って書いてるけどテレビは実は 39 インチだった)&lt;/p&gt;

&lt;p&gt;普段テレビは部屋側に向けてますが、机側に向けることで BGV を流しつつ作業することもできます。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;机側に向けることもできて便利。40 インチ超が 2 枚ならぶとなかなかの迫力 &lt;a href=&#34;https://t.co/HIkf7MCOVY&#34;&gt;pic.twitter.com/HIkf7MCOVY&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yuya Takeyama ◢͟￨⁴⁶ (@yuya_takeyama) &lt;a href=&#34;https://twitter.com/yuya_takeyama/status/946982525167026176?ref_src=twsrc%5Etfw&#34;&gt;December 30, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;アーム側の VESA マウント規格としては 100x100 ですが、モニター側はいずれも 200x100 だったので以下のアダプタを使って取り付けてます。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00LCKZ79Q&amp;linkId=e5e993e1790ac92b6e08332a767159ce&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;(200x200 って書いてあるけど 200x100 にもできます)&lt;/p&gt;

&lt;h3 id=&#34;magnet-window-manager-for-mac-http-magnet-crowdcafe-com&#34;&gt;&lt;a href=&#34;http://magnet.crowdcafe.com/&#34;&gt;Magnet: Window manager for Mac&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.yuyat.jp/images/best-buys-2017/magnet.png&#34; width=&#34;250&#34; height=&#34;547&#34;&gt;&lt;/p&gt;

&lt;p&gt;これはいわゆるタイル型のウィンドマネージャーで、画面が広くなったので欲しくなりました。&lt;/p&gt;

&lt;p&gt;同種のソフトとしては、調べた感じでは &lt;a href=&#34;https://ianyh.com/amethyst/&#34;&gt;Amethyst&lt;/a&gt; とかの方がメジャーっぽかったんですが、Magnet の方が覚えることが少ない感じだったのでこっちにしました。&lt;/p&gt;

&lt;p&gt;分割のカスタマイズ性でいうと Amethyst の方が高そうなので、困ってきたらまた考えると思いますが、今のところ Magnet で全然困ってないです。&lt;/p&gt;

&lt;h3 id=&#34;ipad-pro-10-5インチ-wi-fi-512gb-http-amzn-to-2emea9c-x-apple-pencil-http-amzn-to-2enarat&#34;&gt;&lt;a href=&#34;http://amzn.to/2EmEA9C&#34;&gt;iPad Pro 10.5インチ Wi-Fi 512GB&lt;/a&gt; x &lt;a href=&#34;http://amzn.to/2Enarat&#34;&gt;Apple Pencil&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B073PWCVXB&amp;linkId=53a66e7439ff1235345b803ae1b21331&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B018MX3PNU&amp;linkId=95b04cb3ff0b631b8e78ae65051b094b&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B073BL7THQ&amp;linkId=1ec557bad85e56f31b9af83937a375b6&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;iPad を 2011 年に買った iPad 2 を長いこと使っていたんですが、ここ数年はさすがにスペック的にキツかったので使わなくなっていました。&lt;/p&gt;

&lt;p&gt;書籍は Kindle Whitepaper で十分でしたが、漫画はカラー的にもサイズ的にもやはり iPad が良かったのもあって結構衝動的に書いました。&lt;/p&gt;

&lt;p&gt;ジムで走りながら Hulu とかを見るのにも使ってますが、仕事的には Apple Pencil を使ってポンチ絵を描くのに使いました。&lt;a href=&#34;http://quipper.hatenablog.com/entry/2017/12/06/060641&#34;&gt;会社ブログのこの記事&lt;/a&gt;の図とかも &lt;a href=&#34;https://itunes.apple.com/jp/app/notability/id360593530?mt=8&#34;&gt;Notability&lt;/a&gt; というアプリで書いてます。&lt;/p&gt;

&lt;h3 id=&#34;icoco-スマホスタンド-iphone-ipad-デスクホルダー-http-amzn-to-2c1yocb&#34;&gt;&lt;a href=&#34;http://amzn.to/2C1yOcb&#34;&gt;ICOCO スマホスタンド iPhone iPad デスクホルダー&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01N5QYXGT&amp;linkId=cc72fe2afeb87b690a012bbece39e15d&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;ベッドで寝ながら iPad で Hulu を観たりする用に買いました。元々は机に取り付けたりもしていましたが、今はテレビをアームで取り付けたことによって、完全にベッド専用になりました。&lt;/p&gt;

&lt;p&gt;これは寒い日にベッドで使っていると一日がそれだけで終わってしまってなかなか危険です。&lt;/p&gt;

&lt;p&gt;角度をうねうね好きに変えられるのと、そこそこ強いので iPad Pro を取り付けても、動画を観てるだけならちゃんと安定します。Kindle ページめくりのためにタッチしたりするとさすがに揺れます。&lt;/p&gt;

&lt;h3 id=&#34;apple-airpods-http-amzn-to-2c28tru&#34;&gt;&lt;a href=&#34;http://amzn.to/2C28TRu&#34;&gt;Apple AirPods&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01N2VMGT6&amp;linkId=05d8de33ee176bd94e6fb69bd828dfea&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;普段の移動中は 2009 年ぐらいに買った audio-technica のカナル型イヤホンを使っていましたが、ゴムの耳栓が片方なくなったままだったこともあって買い替えを検討していました。&lt;/p&gt;

&lt;p&gt;当初は &lt;a href=&#34;http://amzn.to/2lws6DZ&#34;&gt;earin&lt;/a&gt; とかも検討していましたが、充電時間だったり iPhone との連携がしっかりしていたことなどから AirPods にしました。&lt;/p&gt;

&lt;p&gt;職場では Bose の &lt;a href=&#34;http://amzn.to/2C2agzC&#34;&gt;QuietComfort 25&lt;/a&gt; を使っていて、ノイズキャンセリング機能だったり音質だったりといったスペック面ではどう考えてもそっちの方が上ですが、つけた時の身軽さから最近はもっぱら AirPods の方を使っています。&lt;/p&gt;

&lt;p&gt;ジムで走るときにつけていても全然落ちることがなく、快適です。ただ、耳の形の個人差ですぐ落ちる人もいるらしいので、買う前に試着して確かめるのがいいと思います。&lt;/p&gt;

&lt;h2 id=&#34;生活編&#34;&gt;生活編&lt;/h2&gt;

&lt;h3 id=&#34;ikea-の可変式食卓-http-www-ikea-com-jp-ja-catalog-products-40365795&#34;&gt;&lt;a href=&#34;http://www.ikea.com/jp/ja/catalog/products/40365795/&#34;&gt;IKEA の可変式食卓&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;元々は円形の食卓を使っていたんですが、デッドスペースが大きいので四角形の食卓を探していました。&lt;/p&gt;

&lt;p&gt;2 人暮らしなので基本的にはそんなに大きいものじゃなくていいんですが、たまに人が来たときに困ったりしていたので大きくできるのは良いです。引き出しがあるのも便利。&lt;/p&gt;

&lt;h3 id=&#34;amazon-echo-dot-http-amzn-to-2de7ck2&#34;&gt;&lt;a href=&#34;http://amzn.to/2DE7Ck2&#34;&gt;Amazon Echo Dot&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B072B5BTLK&amp;linkId=6213027d305dc8b96718b09ca66e61c1&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;まだ買ったばかりで全然活用はできてないんですが、Lambda にコードをデプロイするだけで自分のアプリ (Alexa Skill) が動かせるのはハッカー心を突き動かされるものがあって Google Home よりも楽しい気がしてます。プログラマにはおすすめ。&lt;/p&gt;

&lt;p&gt;詳しくはこちらの記事にて。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.yuyat.jp/post/alexa-skill-keyakizaka46/&#34;&gt;欅坂46 の情報が聞ける Alexa Skill を作った&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;google-home-https-store-google-com-product-google-home&#34;&gt;&lt;a href=&#34;https://store.google.com/product/google_home&#34;&gt;Google Home&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;正直まだまだだなと思うところはあるものの、普通に毎日使っています。用途としては以下のような感じです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chromecast の操作

&lt;ul&gt;
&lt;li&gt;YouTube&lt;/li&gt;
&lt;li&gt;Netflix&lt;/li&gt;
&lt;li&gt;Google Play Music&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT&lt;/a&gt; と &lt;a href=&#34;http://nature.global/&#34;&gt;Nature Remo&lt;/a&gt; を使った家電の操作

&lt;ul&gt;
&lt;li&gt;照明&lt;/li&gt;
&lt;li&gt;エアコン&lt;/li&gt;
&lt;li&gt;テレビ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://radiko.jp/&#34;&gt;Radiko&lt;/a&gt; の再生&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;照明は &lt;a href=&#34;http://amzn.to/2q6qxC7&#34;&gt;Philips Hue&lt;/a&gt; も買いましたが、明るさが足りないのとランニングコストの高さを考えると、あくまで飛び道具であってメインでの使用は厳しい気がしています。&lt;/p&gt;

&lt;p&gt;うちのマンションは元々伝統がリモコン式で、Nature Remo に信号を学習させることで普通の蛍光灯が Google Home で操作できるようになったので、実はそっちだけで十分ということがすぐにわかりました。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B072MYJYD1&amp;linkId=115d3ef3eac44aa3cd224bc63f9b454c&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;まだまだだなと思うのは単純に全然賢くないところです。かなりルールベース感があって、学習してくれてる感はあまり感じません。&lt;/p&gt;

&lt;h3 id=&#34;nature-remo-http-nature-global&#34;&gt;&lt;a href=&#34;http://nature.global/&#34;&gt;Nature Remo&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Indiegogo で back したのは去年だったと思いますが、今年の 5 月末にようやく受け取りました。&lt;/p&gt;

&lt;p&gt;元々は「エアコンの温度を勝手にいい感じにしてくれるヤツ」だと思ってましたが、そっちの機能は全然まだまだだと思います。&lt;/p&gt;

&lt;p&gt;それよりは単純に赤外線学習リモコンとしては簡単に使えるので、そっちで使っています。&lt;/p&gt;

&lt;p&gt;テレビはテレビ局ごとに信号を登録して、いずれも Google Home から操作できるようにしています。&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Google Home 買ってからの IFTTT の様子 &lt;a href=&#34;https://t.co/qBJJFTtLBw&#34;&gt;pic.twitter.com/qBJJFTtLBw&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yuya Takeyama ◢͟￨⁴⁶ (@yuya_takeyama) &lt;a href=&#34;https://twitter.com/yuya_takeyama/status/931935866536148993?ref_src=twsrc%5Etfw&#34;&gt;November 18, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;一個一個登録していかないといけないのは面倒ですね。&lt;/p&gt;

&lt;p&gt;あと IFTTT からのトリガー 1 回につき 1 つの信号しか送れないので、テレビとエアコンと照明をまとめて消したりというのはできないし、テレビの音量も 1 つずつしか変えられないのは辛いので、その辺はなんとかして欲しいところです。&lt;/p&gt;

&lt;h2 id=&#34;音楽編&#34;&gt;音楽編&lt;/h2&gt;

&lt;h3 id=&#34;欅坂46-関連いろいろ-http-amzn-to-2endpa8&#34;&gt;&lt;a href=&#34;http://amzn.to/2EnDpa8&#34;&gt;欅坂46 関連いろいろ&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B072KRPMTB&amp;linkId=e8f89e2aaf38fc8c2109d6b8db69d497&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01BHPEC9G&amp;linkId=bb244653d24a6f6d787f814d263ed5ee&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B06VV1DVBJ&amp;linkId=67ed252a3a49cc81b952cae6c13140ec&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B075N3P398&amp;linkId=83a0c29df107eb627c626a78735a2bd0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.yuyat.jp/post/alexa-skill-keyakizaka46/&#34;&gt;Alexa の記事&lt;/a&gt;にも買いたので詳細は避けますが、年末に急にハマりました。&lt;/p&gt;

&lt;p&gt;曲でいうとエキセントリックと不協和音が特に好きですが、最近は避雷針を何度も聞いてます。あとはメロディがセーラー服と機関銃を思わせる平手友梨奈のソロ曲山手線もいいですね。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/65v7JSBpQ4U&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/gfzuzDrVRVM&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/8y14n7mEVlo&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/WqAGACYJiNM&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B077312MD6&amp;linkId=46ee789e403a52d743d1a9d3938a8810&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4778316118&amp;linkId=1e571381d34f90c69c8e2f0b7fe373bd&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;雑誌も新刊を中心にバックナンバーも含めて買っていますが、今泉佑唯が表紙の BRODY に載っている、ミュージックビデオ監督のインタビューはすごく良かったです。MV 見直したくなります。&lt;/p&gt;

&lt;p&gt;あとは最近出たクイックジャパンも良かったです。最近の平手友梨奈は健康・精神面が心配されることも多いですが、インタビューを読むとこの先がかなり楽しみになりました。心配がなくなるわけではないけど。&lt;/p&gt;

&lt;h3 id=&#34;seafaring-strangers-private-yacht-http-amzn-to-2csr3za&#34;&gt;&lt;a href=&#34;http://amzn.to/2Csr3za&#34;&gt;Seafaring Strangers: Private Yacht&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.numerogroup.com/series/wayfaring-strangers&#34;&gt;Wayfaring Strangers&lt;/a&gt; シリーズ等でいろんなジャンルのレア音源の再発を行なっている &lt;a href=&#34;http://www.numerogroup.com/&#34;&gt;Numero Group&lt;/a&gt; からの AOR のコンピレーションです。夏を感じられるので、夏頃はずっと聴いていました。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/Y_AZLXg3nNM&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;その他&#34;&gt;その他&lt;/h2&gt;

&lt;h3 id=&#34;ニンテンドークラシックミニ-スーパーファミコン-http-amzn-to-2coful1&#34;&gt;&lt;a href=&#34;http://amzn.to/2CoFUL1&#34;&gt;ニンテンドークラシックミニ スーパーファミコン&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;正直自宅では 2、3 回ぐらいしかやってないんですが、同年代の家に集まるときはかなり盛り上がれるので買って良かったです。&lt;/p&gt;

&lt;h3 id=&#34;キャリーバッグ-http-amzn-to-2lys1j8&#34;&gt;&lt;a href=&#34;http://amzn.to/2lys1j8&#34;&gt;キャリーバッグ&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01N95WMBW&amp;linkId=afa85d51591cedbb28f2e7b6f9f58a9e&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;去年は Quipper に入って初の海外出張でインドネシアに行ったりしたんですが、キャリーバッグを持ってなくて、妹に借りたバッグで行って来ました。キャリーバッグを今まで使ったことがなかったんですが、便利だったのでより良いのを買ってみました。&lt;/p&gt;

&lt;p&gt;その後、実家への行き来が何度かあって飛行機に乗ることが多かったので重宝しました。特に、ローラーがしっかりしているので、重くてもほとんど勝手に動いてくれるのが良いです。&lt;/p&gt;

&lt;h3 id=&#34;a-w-ルートビア-http-amzn-to-2lyv1hv&#34;&gt;&lt;a href=&#34;http://amzn.to/2lyV1Hv&#34;&gt;A&amp;amp;W ルートビア&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B002EMXOKU&amp;linkId=7625460f685dd980e23c05f634a14c45&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;会社の近くにある &lt;a href=&#34;http://www.shakeshack.jp/&#34;&gt;SHAKE SHACK&lt;/a&gt; というバーガー屋で初めて飲んでハマりました。飲むサロンパスとも言われる、ケミカルな味が魅力の炭酸飲料です。&lt;/p&gt;

&lt;p&gt;Amazon でまとめ買いするか、ドン・キホーテで少しずつ買って飲んでます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;あまり意識したつもりはなかったけど、終わってみれば&lt;a href=&#34;http://localhost:1313/post/best-buys-2016/&#34;&gt;年明けにやりたいと思っていた&lt;/a&gt;「家電のスマート化」「自宅のプログラミング環境への投資」の両方ともできていたので良かったですね。&lt;/p&gt;

&lt;p&gt;2018 年はスマートホーム化をもっと高度化させつつ、良くなったプログラミング環境で色々作っていければなと思ってます。あとはゲーミングチェアが欲しい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>欅坂46 の情報が聞ける Alexa Skill を作った</title>
      <link>https://blog.yuyat.jp/post/alexa-skill-keyakizaka46/</link>
      <pubDate>Sun, 31 Dec 2017 20:30:19 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/alexa-skill-keyakizaka46/</guid>
      <description>

&lt;p&gt;なかなか来てくれなかった &lt;a href=&#34;http://amzn.to/2zT3Hxt&#34;&gt;Amazon Echo Dot&lt;/a&gt; の招待がようやく来たので、早速買ってみました。&lt;/p&gt;

&lt;p&gt;ある日、テレビでたまたま、平井堅のノンフィクションという曲に合わせて踊る平手友梨奈さんを観て衝撃を受けて以来、欅坂46 の事ばっかり考えているし CD や雑誌をすごい勢いで買って &lt;a href=&#34;http://countdownjapan.jp/&#34;&gt;COUNTDOWN JAPAN&lt;/a&gt; ではライブも観て来ました。&lt;a href=&#34;https://www.youtube.com/watch?v=8y14n7mEVlo&#34;&gt;避雷針&lt;/a&gt;すごく良かったです。&lt;/p&gt;

&lt;p&gt;というわけで題材は欅坂46 です。&lt;/p&gt;

&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;

&lt;p&gt;今のところ 2 つの機能があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;特定の日にちのスケジュールを読み上げる&lt;/li&gt;
&lt;li&gt;特定の日にちまたは月が誕生日のメンバーを読み上げる。&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/fAYt8XUeUFY&#34; frameborder=&#34;0&#34; gesture=&#34;media&#34; allow=&#34;encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;なお、データについては&lt;a href=&#34;http://www.keyakizaka46.com/&#34;&gt;欅坂46公式サイト&lt;/a&gt;から勝手にスクレイピングしているので、公式のストア (?) には登録していないですしそのつもりもありません。ベータテスト機能で自分をテスターとして登録しています。&lt;/p&gt;

&lt;p&gt;自分でデプロイできる人はそれでやってみてもいいですし、ちょっと使ってみたい、という方は &lt;a href=&#34;https://twitter.com/yuya_takeyama&#34;&gt;Twitter&lt;/a&gt; に声かけてもらえればベータテスターとして招待することもできます。&lt;/p&gt;

&lt;h2 id=&#34;ソースコード&#34;&gt;ソースコード&lt;/h2&gt;

&lt;p&gt;GitHub に MIT License で公開しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/alexa-keyakizaka-info&#34;&gt;yuya-takeyama/alexa-keyakizaka-info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、Alexa Skill の Intent とかの設定は以下のようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/yuya-takeyama/c05d131d63865aa952eaa37470dc400f&#34;&gt;欅坂情報 Alexa Skill の Intent とかの設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;構成&#34;&gt;構成&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;言語: TypeScript&lt;/li&gt;
&lt;li&gt;動作環境: AWS Lambda (Node.js 6.10)&lt;/li&gt;
&lt;li&gt;主なライブラリ

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/alexa-sdk&#34;&gt;alexa-sdk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/axios&#34;&gt;axios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tmpvar/jsdom&#34;&gt;jsdom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;仕組み&#34;&gt;仕組み&lt;/h2&gt;

&lt;p&gt;先にも書いた通り、スケジュール・誕生日のいずれも公式サイトのスケジュールページからスクレイピングしてます。&lt;/p&gt;

&lt;p&gt;誕生日については、事前にデータだけ用意をしておけばスクレイピングは必要ないですし、メンバー名から誕生日を読み上げる事も実装できるので、そういう感じに作り変えるかもしれません。&lt;/p&gt;

&lt;p&gt;必要な情報を元に読み上げる文言を組み立てて、alexa-sdk を使ってレスポンスを返してます。&lt;/p&gt;

&lt;p&gt;リクエストを受けて動作するプログラムは AWS Lambda 上で動作しており、Alexa Skill としては基本的な構成だと思います。&lt;/p&gt;

&lt;h2 id=&#34;作ってみて思ったこと&#34;&gt;作ってみて思ったこと&lt;/h2&gt;

&lt;h3 id=&#34;タイムゾーンは基本的に考えなくて良い&#34;&gt;タイムゾーンは基本的に考えなくて良い&lt;/h3&gt;

&lt;p&gt;これはもちろん Skill の性質にもよるんですが、今回のケースでいうとタイムゾーンのことを考慮する必要はありませんでした。&lt;/p&gt;

&lt;p&gt;今回でいうと「今日」とか「あさって」とか「来週の金曜日」といった感じに日付を指定しますが、これらはリクエストの中に Slot として含まれます。まぁ平たくいうとパラメータです。これは事前に定義したものを受け取れます。&lt;/p&gt;

&lt;p&gt;これらの日付については Amazon Echo 側のタイムゾーンに基づいて送られてくるようで、例えば日本時間 12 月 31 日の午前 4 時は UTC ではまだ 12 月 30 の 19 時ですが、Lambda には「2017-12-31」という文字列で受け取れます。&lt;/p&gt;

&lt;p&gt;開発中にハマったのが、Service Simulator から「今日」と送ると前日の日付が送られて来て、おそらく UTC の日付が送られて来ていたんですが、Amazon Echo Dot 実機からだと JST と思われる日付で受け取れていました。&lt;/p&gt;

&lt;p&gt;今回は日付ベースの処理しかなかったのでこういう結論になりましたが、例えば時刻の計算を行うようなアプリとかだと当然タイムゾーンは考慮する必要があると思います。&lt;/p&gt;

&lt;h3 id=&#34;開発中はフィードバックのループを回すのが大変&#34;&gt;開発中はフィードバックのループを回すのが大変&lt;/h3&gt;

&lt;p&gt;作る前から想像していましたが、やはり試行錯誤を繰り返すのに時間がかかります。&lt;/p&gt;

&lt;p&gt;今回は CircleCI で AWS Lambda へのデプロイを自動化したところで効率よく回せるようになって来ました。&lt;/p&gt;

&lt;p&gt;本番用とテスト用二つの Alexa Skill を登録しておいて、機能ブランチへの push ごとにテスト用のアプリを更新、master にマージすると本番を更新、としています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/alexa-keyakizaka-info/blob/master/.circleci/config.yml&#34;&gt;.circleci/config.yml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今のところ awscli のインストールに時間がかかってしまっていて、あらかじめインストールした Docker Image を作っておけば短縮できると思いますが、まぁその辺は後回しで。&lt;/p&gt;

&lt;p&gt;あとはスケジュールの取得とか誕生日の取得とかの部分は独立してテストできるようにしておくと細かくテストできて良かったです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/alexa-keyakizaka-info/tree/master/bin&#34;&gt;./bin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;手軽にハックできて楽しい&#34;&gt;手軽にハックできて楽しい！&lt;/h3&gt;

&lt;p&gt;先に Google Home も買っていて、そっちは Nature Remo と IFTTT を組み合わせて照明、テレビ、エアコンの操作に毎日使っていますが、まだアプリの開発には手を出していません。&lt;/p&gt;

&lt;p&gt;一方 Alexa は Lambda に Node.js のコードをちょっとデプロイするだけで簡単に動かせてお手軽なので、購入初日から手をつけていました。&lt;/p&gt;

&lt;p&gt;事前に AWS のアカウントを持っているかとか、Lambda を触ったことがあるかによっても変わってくるとは思いますが、その辺を仕事で触っている人には本当に簡単だと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>peco で S3 のバケット・ファイル一覧を見るやつを作ったらめちゃくちゃ便利なのができた</title>
      <link>https://blog.yuyat.jp/post/peco-s3.zsh/</link>
      <pubDate>Fri, 12 May 2017 00:46:00 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/peco-s3.zsh/</guid>
      <description>

&lt;p&gt;釣りっぽいタイトルにしてしまったけどまぁ主観なので&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/peco-s3.zsh&#34;&gt;yuya-takeyama/peco-s3.zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これがどんなものなのかはこのスクリーンキャストを見てもらうのが一番良いでしょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.yuyat.jp/images/peco-s3.zsh/screenshot.gif&#34; alt=&#34;Screenshot&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;機能&#34;&gt;機能&lt;/h2&gt;

&lt;h3 id=&#34;バケットの一覧化&#34;&gt;バケットの一覧化&lt;/h3&gt;

&lt;p&gt;このスクリーンキャストではバケット名を指定してその中身を一覧化していますが、引数を省略した場合はバケットの一覧が表示され、選択することでさらにその中のファイルを一覧化することができます。&lt;/p&gt;

&lt;h3 id=&#34;元の一覧に戻る&#34;&gt;元の一覧に戻る&lt;/h3&gt;

&lt;p&gt;バケット・ディレクトリの中に移動したあとで Esc を押すと元のディレクトリに戻ることができます。&lt;/p&gt;

&lt;h3 id=&#34;peco-によるフィルタ&#34;&gt;peco によるフィルタ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/peco/peco&#34;&gt;peco&lt;/a&gt; をベースとしているので、文字列で対象をフィルタしながらファイル・ディレクトリを選択することができます。&lt;/p&gt;

&lt;h3 id=&#34;s3cat-コマンドの生成&#34;&gt;s3cat コマンドの生成&lt;/h3&gt;

&lt;p&gt;ファイルを選択すると、そのファイルを出力するための &lt;code&gt;s3cat&lt;/code&gt; コマンドがプロンプトに出力されます。&lt;/p&gt;

&lt;p&gt;そのまま実行すればファイルを出力できますし、パイプでつないで別のコマンドに繋げていくこともできます。&lt;/p&gt;

&lt;h3 id=&#34;ファイルの再帰的な一覧化&#34;&gt;ファイルの再帰的な一覧化&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;--recursive&lt;/code&gt; (&lt;code&gt;-r&lt;/code&gt;) オプションを使うことで、ディレクトリ以下のファイルも再帰的に取得し、全て一覧化することができます。&lt;/p&gt;

&lt;h2 id=&#34;使い方-インストール手順&#34;&gt;使い方・インストール手順&lt;/h2&gt;

&lt;p&gt;GitHub の &lt;code&gt;README.md&lt;/code&gt; を参照してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/peco-s3.zsh&#34;&gt;yuya-takeyama/peco-s3.zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;終わりに&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;zsh というかシェルスクリプトはあんまり得意じゃないので、コード的には結構拙い感じだと思います。&lt;br /&gt;
良ければ Pull Request ください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MongoMapper で Mass Assignment を自動検出する</title>
      <link>https://blog.yuyat.jp/post/automatic-mass-assignment-detection-for-mongomapper/</link>
      <pubDate>Thu, 13 Apr 2017 01:14:30 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/automatic-mass-assignment-detection-for-mongomapper/</guid>
      <description>

&lt;p&gt;GitHub が &lt;a href=&#34;https://www.infoq.com/jp/news/2012/03/GitHub-Compromised&#34;&gt;Mass Assignment 脆弱性を突かれて&lt;/a&gt;からもう 5 年も経っているんですね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ActiveRecord&lt;/code&gt; (というか &lt;code&gt;ActiveModel&lt;/code&gt;) では適切に &lt;code&gt;.permit&lt;/code&gt; したパラメータ以外は &lt;code&gt;ActiveModel::ForbiddenAttributesError&lt;/code&gt; が発生するようになっていますが、&lt;code&gt;MongoMapper&lt;/code&gt; ではそうなってなかったので対応させてみました。&lt;/p&gt;

&lt;h2 id=&#34;プラグインの実装&#34;&gt;プラグインの実装&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ActiveModel&lt;/code&gt; の &lt;a href=&#34;https://apidock.com/rails/ActiveModel/ForbiddenAttributesProtection&#34;&gt;&lt;code&gt;ForbiddenAttributesProtection&lt;/code&gt;&lt;/a&gt; をそのまま利用します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;module MongoMapper
  module Plugins
    module ForbiddenAttributesProtection
      extend ActiveSupport::Concern

      included do
        include ::ActiveModel::ForbiddenAttributesProtection
      end

      def attributes=(attrs = {})
        super sanitize_for_mass_assignment(attrs)
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;利用する&#34;&gt;利用する&lt;/h2&gt;

&lt;p&gt;とりあえず &lt;code&gt;MongoMapper::Document&lt;/code&gt; を &lt;code&gt;include&lt;/code&gt; した全てのクラスに適用するには以下を呼ぶ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;MongoMapper::Document.plugin(MongoMapper::Plugins::ForbiddenAttributesProtection)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただし、各クラスが &lt;code&gt;MongoMapper::Document&lt;/code&gt; を &lt;code&gt;include&lt;/code&gt; するのより先に実行されている必要があると思います。&lt;/p&gt;

&lt;p&gt;もしくは個別のクラスに適用する場合は普通に &lt;code&gt;include&lt;/code&gt; でも良いです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;class User
  include MongoMapper::Document
  include MongoMapper::Plugins::ForbiddenAttributesProtection
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、適切に &lt;code&gt;.permit&lt;/code&gt; していない &lt;code&gt;ActionController::Parameters&lt;/code&gt; をセットしたりしようとすると &lt;code&gt;ActiveModel::ForbiddenAttributesError&lt;/code&gt; が発生するようになります。&lt;/p&gt;

&lt;p&gt;もちろん雑に &lt;code&gt;.to_h&lt;/code&gt; したりしたものを渡したりするとそれは検出できないので、そういうのは人間が気づく必要があります。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Heroku で Resque を Graceful Shutdown する</title>
      <link>https://blog.yuyat.jp/post/graceful-shutdown-resque-in-heroku/</link>
      <pubDate>Mon, 10 Apr 2017 02:02:59 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/graceful-shutdown-resque-in-heroku/</guid>
      <description>

&lt;p&gt;Heroku で Resque を動かす場合、何も考えないでセットアップすると、デプロイによるプロセスの再起動時や、Dyno のスケールダウン時に Worker プロセスが強制終了され、&lt;code&gt;Resque::DirtyExit&lt;/code&gt; としてエラーになってしまいます。&lt;/p&gt;

&lt;p&gt;これを避けるために正しく &lt;strong&gt;Graceful Shutdown&lt;/strong&gt; する方法について調べてみました。&lt;/p&gt;

&lt;h2 id=&#34;前提とするバージョン&#34;&gt;前提とするバージョン&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ruby 2.4.1&lt;/li&gt;
&lt;li&gt;Rails 5.0.2&lt;/li&gt;
&lt;li&gt;Resque 1.27.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;graceful-shutdown-とは-この記事における定義&#34;&gt;Graceful Shutdown とは (この記事における定義)&lt;/h2&gt;

&lt;p&gt;厳密な定義を知っているわけではないですが、この記事では以下のような定義で話を進めます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Graceful Shutdown: 中途半端なデータが残らないよう、行儀よくプロセスを終了する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さらにこれを細分化して、この記事では以下のように呼ぶことにします。これらは私の造語で、全く一般的でない呼び方です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Halfway Graceful Shutdown: やりかけの処理に完了処理を行ってから全体の途中で処理を終了する&lt;/li&gt;
&lt;li&gt;Entire Graceful Shutdown: すべての処理が完了してから終了する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例えば、100 件のデータを処理する Worker があり、50 件目を行っている途中で終了のシグナルを受け取った場合、その 50 件目まで正しくやりきったタイミングで終了するのが &lt;strong&gt;Halfway Graceful Shutdown&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;そして、50 件目の段階で終了のシグナルを受け取っても、100 件すべてをやりきった上で終了するのが &lt;strong&gt;Entire Graceful Shutdown&lt;/strong&gt; となります。&lt;/p&gt;

&lt;p&gt;これに対して、いきなり終了してしまうことをここでは &lt;strong&gt;Immediate Shutdown&lt;/strong&gt; と呼ぶことにします。
これも一般的な用語なのかはわからないですが、検索した感じではこういう用語を使っているドキュメントもいくつか見つかりました。&lt;/p&gt;

&lt;h2 id=&#34;resque-における-graceful-shutdown&#34;&gt;Resque における Graceful Shutdown&lt;/h2&gt;

&lt;p&gt;Resque では Graceful Shutdown を行う方法として、QUIT シグナルによる方法が提供されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/resque/resque#signals&#34;&gt;resque/resque: Signals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり Resque のプロセス ID に対して以下のようなコマンドを実行すれば良いことになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kill -QUIT PID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、&lt;code&gt;QUIT&lt;/code&gt; を受け取った時の挙動は、この記事の定義で言えば Entire Graceful Shutdown です。&lt;/p&gt;

&lt;h2 id=&#34;heroku-で-graceful-shutdown-を行う際の問題点&#34;&gt;Heroku で Graceful Shutdown を行う際の問題点&lt;/h2&gt;

&lt;p&gt;Heroku のような PaaS では任意の UNIX プロセスに対して任意のシグナルを送ることはできないことが一般的でしょう。 (少なくとも Heorku ではできません)&lt;/p&gt;

&lt;p&gt;それでいて、以下のような場合は &lt;code&gt;TERM&lt;/code&gt; シグナルが送信されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デプロイの実行による Dyno の再起動&lt;/li&gt;
&lt;li&gt;Dyno のスケールダウン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Heroku ではこれらの場合、まずは &lt;code&gt;TERM&lt;/code&gt; シグナルが送られ、それでもプロセスが残っている場合は 30 秒後に &lt;code&gt;KILL&lt;/code&gt; シグナルが送られて強制終了となります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/error-codes#r12-exit-timeout&#34;&gt;Heroku Error Codes: R12 - Exit Timeout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして &lt;code&gt;TERM&lt;/code&gt; が送られた場合の Resque のデフォルトの挙動は Immediate Shutdown です。&lt;/p&gt;

&lt;h2 id=&#34;heroku-で-resque-を-graceful-shutdown-する&#34;&gt;Heroku で Resque を Graceful Shutdown する&lt;/h2&gt;

&lt;p&gt;実は &lt;a href=&#34;https://github.com/resque/resque#resque&#34;&gt;Resque の README&lt;/a&gt; や &lt;a href=&#34;https://devcenter.heroku.com/articles/queuing-ruby-resque#process-options&#34;&gt;Heroku のドキュメント&lt;/a&gt;にもいろいろ説明はあるんですが、以下のような理由で、一読しただけ正しく理解するのは難しいと思いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Resque の &lt;code&gt;master&lt;/code&gt; ブランチの README に書いてある内容の一部は現状の最新版 (&lt;code&gt;v1.27.2&lt;/code&gt;) では使えないのでややこしい

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/resque/resque/pull/1514&#34;&gt;&lt;code&gt;RESQUE_PRE_SHUTDOWN_TIMEOUT&lt;/code&gt;&lt;/a&gt; というオプションはまだリリースされていない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Resque のドキュメントには記載されていないが有用なオプションがある

&lt;ul&gt;
&lt;li&gt;Entire Gracful Shutdown を行う上で必要な &lt;a href=&#34;https://github.com/resque/resque/pull/1007&#34;&gt;GRACEFUL_TERM&lt;/a&gt; というオプション&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Heroku のドキュメントは Resque に関する情報が一部古いか間違っている

&lt;ul&gt;
&lt;li&gt;少なくとも Rails 5.0.2 では &lt;code&gt;rake resque:work&lt;/code&gt; ではなく &lt;code&gt;rake environment resque:work&lt;/code&gt; としないとエラーで Worker が起動できない&lt;/li&gt;
&lt;li&gt;SIGTERM から 10 秒後に SIGKILL、と言う説明があるが正しくは 30 秒&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resque の &lt;code&gt;GRACEFUL_TERM&lt;/code&gt; についてはプルリクエストを送ればいいとして、Heroku のドキュメントの問題についてはどこに報告すべきかよくわからないので知ってる人は教えてください。&lt;/p&gt;

&lt;h3 id=&#34;halfway-graceful-shutdown&#34;&gt;Halfway Graceful Shutdown&lt;/h3&gt;

&lt;p&gt;これは実は以下の記事でほぼ説明されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webtech-walker.com/archive/2012/09/resque_heroku.html&#34;&gt;HerokuでResqueを使うときに優雅に再起動する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ただしこれも 4 年半ほど前の記事なので、現時点では以下のようにする必要があるでしょう。&lt;/p&gt;

&lt;h4 id=&#34;worker-の実装&#34;&gt;Worker の実装&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;perform&lt;/code&gt; メソッドの中で &lt;code&gt;Resque::TermException&lt;/code&gt; を &lt;code&gt;rescue&lt;/code&gt; し、完了処理を実装します。&lt;/p&gt;

&lt;p&gt;これについては上記の記事通りで問題ありません。&lt;/p&gt;

&lt;h4 id=&#34;procfile&#34;&gt;Procfile&lt;/h4&gt;

&lt;p&gt;以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resque: QUEUE=* TERM_CHILD=1 RESQUE_TERM_TIMEOUT=30 bundle exec rake environment resque:work
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;現在のバージョンでは &lt;code&gt;QUEUE&lt;/code&gt; の指定が必須です。 (もちろん必要に応じて変更する)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TERM_CHILD&lt;/code&gt; をセットすると &lt;code&gt;TERM&lt;/code&gt; シグナルを受け取った時の挙動が変わります。&lt;/p&gt;

&lt;p&gt;デフォルトでは &lt;code&gt;TERM&lt;/code&gt; を受け取ると容赦なく Worker である子プロセスに &lt;code&gt;KILL&lt;/code&gt; を送り Immediate Shutdown となります。&lt;/p&gt;

&lt;p&gt;これに対して &lt;code&gt;TERM_CHILD&lt;/code&gt; をセットした場合は以下のような流れになります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Worker である子プロセスに対して &lt;code&gt;TERM&lt;/code&gt; を送る

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Resque::TermException&lt;/code&gt; が &lt;code&gt;raise&lt;/code&gt; される&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TERM_TIMEOUT&lt;/code&gt; に指定した秒数の間、子プロセスが終了するのを待つ&lt;/li&gt;
&lt;li&gt;それでも子プロセスが残っていれば今度は &lt;code&gt;KILL&lt;/code&gt; を送って強制終了する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;前述の Heroku の制限のため、&lt;code&gt;RESQUE_TERM_TIMEOUT&lt;/code&gt; は 30 秒以下にする必要があります。 (それ以上を指定しても結局 Heroku から &lt;code&gt;KILL&lt;/code&gt; される)&lt;/p&gt;

&lt;h3 id=&#34;resque-pre-shutdown-timeout-について&#34;&gt;&lt;code&gt;RESQUE_PRE_SHUTDOWN_TIMEOUT&lt;/code&gt; について&lt;/h3&gt;

&lt;p&gt;前述の通り未リリースではあるものの、&lt;code&gt;master&lt;/code&gt; ブランチに入っていてそのうち使えるようになると思われるこのオプションについても調べてみました。&lt;/p&gt;

&lt;p&gt;これは &lt;code&gt;TERM_CHILD&lt;/code&gt; をセットしている場合のみに有効なオプションで、子プロセスに &lt;code&gt;TERM&lt;/code&gt; を送る前の待ち時間を秒数で指定することができます。&lt;/p&gt;

&lt;p&gt;つまりこれは &lt;code&gt;Halfway Graceful Shutdown&lt;/code&gt; と &lt;code&gt;Entire Graceful Shutdown&lt;/code&gt; 複合です。&lt;/p&gt;

&lt;p&gt;例えば &lt;code&gt;Procfile&lt;/code&gt; を以下のようにした場合、&lt;code&gt;TERM&lt;/code&gt; を受け取った後の挙動は以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resque: QUEUE=* TERM_CHILD=1 RESQUE_PRE_SHUTDOWN_TIMEOUT=20 RESQUE_TERM_TIMEOUT=10 bundle exec rake environment resque:work
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;子プロセスの処理が完了するまで 20 秒間待つ

&lt;ul&gt;
&lt;li&gt;この 20 秒間に処理が全て完了すれば Entire Graceful Shutdown&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;子プロセスに &lt;code&gt;TERM&lt;/code&gt; を送る

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Resque::TermException&lt;/code&gt; が &lt;code&gt;raise&lt;/code&gt; される&lt;/li&gt;
&lt;li&gt;この場合は Halfway Graceful Shutdown&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;子プロセスが終了するまでさらに 10 秒間待つ&lt;/li&gt;
&lt;li&gt;それでも子プロセスが残っていれば今度は &lt;code&gt;KILL&lt;/code&gt; を送って強制終了する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体的な秒数については実際に動いている Worker の実行時間を元にチューニングするのが良いでしょう。&lt;/p&gt;

&lt;p&gt;いずれにせよ &lt;code&gt;RESQUE_PRE_SHUTDOWN_TIMEOUT&lt;/code&gt; と &lt;code&gt;RESQUE_TERM_TIMEOUT&lt;/code&gt; の合計は 30 以下にする必要があります。&lt;/p&gt;

&lt;h3 id=&#34;entire-graceful-shutdown&#34;&gt;Entire Graceful Shutdown&lt;/h3&gt;

&lt;p&gt;これについては説明されている記事が見つけられなかったので、自分で実際に Heroku で動かしながらわかったことを元に書きます。&lt;/p&gt;

&lt;h4 id=&#34;worker-の実装-1&#34;&gt;Worker の実装&lt;/h4&gt;

&lt;p&gt;Halfway Graceful Shutdown を行わないのであれば、&lt;code&gt;Resque::TermException&lt;/code&gt; の &lt;code&gt;rescue&lt;/code&gt; は不要です。&lt;/p&gt;

&lt;h4 id=&#34;procfile-1&#34;&gt;Procfile&lt;/h4&gt;

&lt;p&gt;以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resque: QUEUE=* GRACEFUL_TERM=1 bundle exec rake environment resque:work
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この場合は &lt;code&gt;TERM_CHILD&lt;/code&gt; を指定してはいけません。指定した場合、&lt;code&gt;GRACEFUL_TERM&lt;/code&gt; の設定が&lt;a href=&#34;https://github.com/resque/resque/blob/v1.27.2/lib/resque/worker.rb#L866&#34;&gt;無効果されます&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&#34;graceful-term-とは&#34;&gt;&lt;code&gt;GRACEFUL_TERM&lt;/code&gt; とは&lt;/h4&gt;

&lt;p&gt;これは &lt;code&gt;TERM&lt;/code&gt; を受け取った時の処理を (Entire) Graceful Shutdown にするというものです。&lt;/p&gt;

&lt;p&gt;前述の通り今の所ドキュメント化されていないようです。&lt;/p&gt;

&lt;h2 id=&#34;どちらの方法を選ぶべきか&#34;&gt;どちらの方法を選ぶべきか&lt;/h2&gt;

&lt;p&gt;基本的には Halfway Graceful Shutdown を選ぶべきでしょう。&lt;/p&gt;

&lt;p&gt;Heroku では 30 秒制限がある以上、Entire Graceful Shutdown を選ぶとしても、Worker は全て 30 秒で完了できなくてはなりません。通常 1 分かかる処理があったとして、20 秒時点で &lt;code&gt;TERM&lt;/code&gt; を受け取った場合、Entire Graceful Shutdown では最後の 10 秒分の処理を残して強制終了されてしまうからです。&lt;/p&gt;

&lt;p&gt;30 秒間に全てを終えることはできなくても、今やりかけの分だけ綺麗に完了させることはできるかもしれません。&lt;/p&gt;

&lt;p&gt;ただし、Halfway Graceful Shutdown を行うには、前述の通り &lt;code&gt;Resque::TermException&lt;/code&gt; を正しく &lt;code&gt;rescue&lt;/code&gt; するような実装を行わなければなりません。&lt;/p&gt;

&lt;p&gt;全ての Worker が 30 秒もかからないような場合であれば、その実装をサボって Entire Graceful Shutdown で妥協するのも良いでしょう。&lt;/p&gt;

&lt;h2 id=&#34;関連するソースの読み方&#34;&gt;関連するソースの読み方&lt;/h2&gt;

&lt;p&gt;ここに書いてあることは基本的には &lt;code&gt;Resque::Worker&lt;/code&gt; だけ読めば全て書いてあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/resque/resque/blob/master/lib/resque/worker.rb&#34;&gt;resque/lib/resque/worker.rb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resque は想像していたよりは意外と重厚な感じではなく、比較的読みやすい分量だと思いました。UNIX プロセスについての勉強としても面白いと思うのでオススメです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js のスタックトレースを控えめにする supress-stack-trace 書いた</title>
      <link>https://blog.yuyat.jp/post/supress-stack-trace/</link>
      <pubDate>Wed, 29 Mar 2017 02:21:11 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/supress-stack-trace/</guid>
      <description>

&lt;p&gt;最近仕事で React/Redux で構築されたアプリを触っていて、&lt;a href=&#34;https://mochajs.org/&#34;&gt;mocha&lt;/a&gt; でテストがコケたときのスタックトレースがうるさい感じだったので &lt;code&gt;node_modules&lt;/code&gt; 内のエラーを除外するためのものを作ってみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/supress-stack-trace&#34;&gt;yuya-takeyama/supress-stack-trace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;まだ npm には登録してないのでとりあえず GitHub から直接インストールする必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ yarn add -D yuya-takeyama/supress-stack-trace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使い方は読み込むだけで OK&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(&#39;supress-stack-trace&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mocha の場合は &lt;code&gt;mocha.opts&lt;/code&gt; に &lt;code&gt;--require supress-stack-trace&lt;/code&gt; とかしてあげるだけでいいと思います。&lt;/p&gt;

&lt;p&gt;今の仕事では &lt;a href=&#34;https://www.npmjs.com/package/mocha-webpack&#34;&gt;mocha-webpack&lt;/a&gt; を使っていて、&lt;code&gt;mocha-webpack.opts&lt;/code&gt; に同じ感じに指定すればうまくできました。&lt;/p&gt;

&lt;p&gt;なお、&lt;a href=&#34;https://github.com/evanw/node-source-map-support&#34;&gt;source-map-support&lt;/a&gt; のように &lt;code&gt;Error.prepareStackTrace&lt;/code&gt; をオーバーライドするライブラリを既に使っている場合は、そのあとで読み込むのが良いと思います。ライブラリの組み合わせによっては動かないこともあると思います。&lt;/p&gt;

&lt;h2 id=&#34;使用感&#34;&gt;使用感&lt;/h2&gt;

&lt;p&gt;このようにすっきりします。&lt;/p&gt;

&lt;h3 id=&#34;before&#34;&gt;Before&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;     Error: error
      at app/components/foo/Foo.jsx:18:11
      at Object.LinkedValueUtils.executeOnChange (node_modules/react-dom/lib/LinkedValueUtils.js:129:1)
      at ReactDOMComponent._handleChange (node_modules/react-dom/lib/ReactDOMInput.js:232:1)
      at Object.invokeGuardedCallback [as invokeGuardedCallbackWithCatch] (node_modules/react-dom/lib/ReactErrorUtils.js:26:1)
      at executeDispatch (node_modules/react-dom/lib/EventPluginUtils.js:83:1)
      at Object.executeDispatchesInOrder (node_modules/react-dom/lib/EventPluginUtils.js:108:1)
      at executeDispatchesAndRelease (node_modules/react-dom/lib/EventPluginHub.js:43:1)
      at executeDispatchesAndReleaseSimulated (node_modules/react-dom/lib/EventPluginHub.js:51:1)
      at forEachAccumulated (node_modules/react-dom/lib/forEachAccumulated.js:26:1)
      at Object.EventPluginHub.processEventQueue (node_modules/react-dom/lib/EventPluginHub.js:255:1)
      at node_modules/react-dom/lib/ReactTestUtils.js:340:1
      at ReactDefaultBatchingStrategyTransaction.TransactionImpl.perform (node_modules/react-dom/lib/Transaction.js:140:1)
      at Object.ReactDefaultBatchingStrategy.batchedUpdates (node_modules/react-dom/lib/ReactDefaultBatchingStrategy.js:62:1)
      at Object.batchedUpdates (node_modules/react-dom/lib/ReactUpdates.js:97:1)
      at node_modules/react-dom/lib/ReactTestUtils.js:338:1
      at ReactWrapper.&amp;lt;anonymous&amp;gt; (node_modules/enzyme/build/ReactWrapper.js:776:1)
      at ReactWrapper.single (node_modules/enzyme/build/ReactWrapper.js:1421:1)
      at ReactWrapper.simulate (node_modules/enzyme/build/ReactWrapper.js:769:1)
      at Context.&amp;lt;anonymous&amp;gt; (test/components/foo/Foo-test.js:168:20)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;after&#34;&gt;After&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;     Error: error
      at app/components/foo/Foo.jsx:18:11
      at Context.&amp;lt;anonymous&amp;gt; (test/components/foo/Foo-test.js:168:20)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;仕組み&#34;&gt;仕組み&lt;/h2&gt;

&lt;p&gt;V8 には &lt;a href=&#34;https://github.com/v8/v8/wiki/Stack-Trace-API&#34;&gt;Stack Trace API&lt;/a&gt; というものがあって、&lt;code&gt;Error.prepareStackTrace&lt;/code&gt; という関数をセットすることでスタックトレースの出力をいじることができます。&lt;/p&gt;

&lt;p&gt;ただこれは API 的にはあまりイケてなくて、エラーとスタックトレースを受け取って文字列を返す関数なので、チェインすることはちょっと難しい感じです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;source-map-support&lt;/code&gt; も &lt;code&gt;Error.prepareStackTrace&lt;/code&gt; をセットしているので、既にセットされた関数があった場合は、その出力の文字列から &lt;code&gt;node_modules/&lt;/code&gt; と含まれた行だけ消す、みたいなことをしています。&lt;/p&gt;

&lt;p&gt;なので例えばエラーメッセージに &lt;code&gt;node_modules/&lt;/code&gt; と含まれていた場合はそこまで省略されてしまいます。 (気が向いたらなおす)&lt;/p&gt;

&lt;h2 id=&#34;その他&#34;&gt;その他&lt;/h2&gt;

&lt;p&gt;あとはやっぱり環境変数で supress しないモードとかもあったらいいと思うんですが、いい名前が思いつかないのでとりあえず後回し。&lt;/p&gt;

&lt;p&gt;思いついたら npm に公開しようと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ruby で週をオブジェクトとして扱うライブラリ ActiveWeek を作った</title>
      <link>https://blog.yuyat.jp/post/activeweek/</link>
      <pubDate>Mon, 09 Jan 2017 03:02:40 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/activeweek/</guid>
      <description>

&lt;p&gt;仕事で必要があって作ったものから仕事固有の事情とかを取り除いた形で作り直してみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/activeweek&#34;&gt;yuya-takeyama/activeweek&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;名前が強すぎるので一旦 RubyGems.org への publish はしていない。&lt;br /&gt;
いろんな人に見てもらって良さそうならする予定。&lt;/p&gt;

&lt;p&gt;なので &lt;code&gt;Gemfile&lt;/code&gt; では GitHub から直接インストール指定するようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;gem &#39;activeweek&#39;, git: &#39;https://github.com/yuya-takeyama/activeweek.git&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/activeweek#activeweek&#34;&gt;README.md&lt;/a&gt; を訳しただけだけど以下のような感じ。&lt;/p&gt;

&lt;p&gt;API がキモのライブラリだと思うので、Ruby ライブラリの API に一家言ある方は&lt;a href=&#34;https://twitter.com/yuya_takeyama&#34;&gt;是非お願いします&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;現在の週を取得&#34;&gt;現在の週を取得&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;require &#39;activeweek&#39;

week = ActiveWeek::Week.current
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;特定のタイムゾーンにおける現在の週を取得&#34;&gt;特定のタイムゾーンにおける現在の週を取得&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;week = Time.use_zone(&#39;Asia/Tokyo&#39;) { ActiveWeek::Week.current }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;週の中の日付を-date-オブジェクトとして列挙する&#34;&gt;週の中の日付を &lt;code&gt;Date&lt;/code&gt; オブジェクトとして列挙する&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;week.each_day { |date| p date }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;前後の週を取得する&#34;&gt;前後の週を取得する&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-rb&#34;&gt;next_week = week.next_week
prev_week = week.prev_week
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ruby-2-4-rails-2-2-について&#34;&gt;Ruby 2.4/Rails 2.2 について&lt;/h2&gt;

&lt;p&gt;現状 Ruby 2.4/Rails 2.2 の組み合わせにおいては、Rails が依存する &lt;code&gt;json&lt;/code&gt; gem の問題でインストールすることができない。&lt;br /&gt;
Rails 2.2.8 がリリースされれば動くようになる予定。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rails/rails/pull/26334&#34;&gt;Removed json dependency from ActiveSupport&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>引越・同棲 1 年目の 2016 年に買って良かったもの</title>
      <link>https://blog.yuyat.jp/post/best-buys-2016/</link>
      <pubDate>Sat, 31 Dec 2016 19:49:41 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/best-buys-2016/</guid>
      <description>

&lt;p&gt;去年 1 番のイベントは&lt;a href=&#34;http://blog.yuyat.jp/archives/2631&#34;&gt;転職&lt;/a&gt;でしたが、今年は引越・同棲というのが一大イベントでした。&lt;/p&gt;

&lt;p&gt;丸 7 年住んだ埼玉から浅草に引越したことで京橋の職場への出勤時間が半分の 30 分に縮まったのも良かったですが、生活環境が変わったのを機に家具も色々と買い、QoL も大幅に向上したので、それを振り返ってみるという体でアフィブログを書きます。&lt;/p&gt;

&lt;h2 id=&#34;生活編&#34;&gt;生活編&lt;/h2&gt;

&lt;h3 id=&#34;東芝ドラム式洗濯機-tw-117x3l-ww-http-kakaku-com-item-k0000821187&#34;&gt;&lt;a href=&#34;http://kakaku.com/item/K0000821187/&#34;&gt;東芝ドラム式洗濯機 TW-117X3L(WW)&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;MVP は明らかにこれです。&lt;/p&gt;

&lt;p&gt;埼玉に住んでいた 7 年間は洗濯機外置きという洗濯機もあってドラム式の大きいのは無理だったんですが、ようやく室内に置ける部屋に引っ越せたので奮発して買いました。&lt;/p&gt;

&lt;p&gt;乾燥機付きでもドラム式とタテ型で迷いました。ドラム式について事前に調べた中で特に気になったのが臭いの問題でしたが、以下に気をつけたところ、購入から 7 ヶ月経つ今の所臭い問題は起きていません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2inXgv9&#34;&gt;ドラム式へに対応した抗菌洗剤&lt;/a&gt; を使う

&lt;ul&gt;
&lt;li&gt;臭いの原因になるのは雑菌と、ドラム式に合わない洗剤が洗濯に残ってしまうこと、ということだったのでその点に注意した&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2 ヶ月に 1 回は&lt;a href=&#34;http://amzn.to/2iPRG7N&#34;&gt;洗濯槽カビキラー&lt;/a&gt;で洗う&lt;/li&gt;
&lt;li&gt;乾燥なしの洗濯だけで終わらせない

&lt;ul&gt;
&lt;li&gt;乾燥機を使えない洗濯があっても、そのあとに乾燥機を使う洗濯物を別途洗うことで、洗濯槽を濡れたまま放置しないようにした&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;洗濯機を使わない間はなるべくフタを開けておいて換気した&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2inYLJF&#34;&gt;排水エルボ&lt;/a&gt; を買う

&lt;ul&gt;
&lt;li&gt;洗濯物の臭いとは関係ないけど下水から臭いが上がってこないようにするのに必要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;thule-paramount-29l-backpack-http-amzn-to-2iqf4lb&#34;&gt;&lt;a href=&#34;http://amzn.to/2iQf4lB&#34;&gt;Thule Paramount 29L Backpack&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00MHNPQ16&amp;linkId=d8e4803f20e116f2e5a7bdd1b7dcd771&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;これは自分で買ったのではなくて誕生日に買ってもらいました。&lt;/p&gt;

&lt;p&gt;長年 &lt;a href=&#34;http://product.rakuten.co.jp/product/-/1e3e477d3b4232eb70c2a0aeee7c5d85/?sc2id=gmc_502240_1e3e477d3b4232eb70c2a0aeee7c5d85&amp;amp;scid=s_kwa_pla&#34;&gt;Chrome の斜めがけメッセンジャーバッグ&lt;/a&gt;を使っていましたが、以下のまとめを見てからずっとバックパックが欲しいと思っていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://togetter.com/li/613904&#34;&gt;重い鞄の斜めがけで椎間板ダメージ疑惑とバックパックのススメ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的になんらかの症状が出ていたわけではなかったものの、単純に片方だけに重さがかかるのは辛かったので、バックパックに変えて良かったです。&lt;br /&gt;
肩のところも程よく厚みがあるので、多少重い荷物も苦になりません。&lt;/p&gt;

&lt;p&gt;ポケットが多くて荷物はいろいろ入りますし、背中の部分は厚みのある素材が使われているので、ラップトップも安心して入れておけます。&lt;/p&gt;

&lt;h3 id=&#34;コクヨ-ホワイトボード-ピタボ-http-amzn-to-2hza5vu&#34;&gt;&lt;a href=&#34;http://amzn.to/2hzA5vU&#34;&gt;コクヨ ホワイトボード ピタボ&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B001MSQWMO&amp;linkId=6743009de3c04122f9243f4322af2e16&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;壁に貼れるホワイトボードですが、貼り直しがしやすく、かつ壁紙にもダメージがないので使いやすいです。&lt;/p&gt;

&lt;p&gt;自分の机の横に貼ってあるので、開発の時の頭の整理や設計メモに使ったり、あとは家事とかの細かい TODO のうち、Trello に記入するのも煩わしいやつとかメモしています。&lt;/p&gt;

&lt;p&gt;アプリで写真を取ると綺麗に取り込めるのも便利です。&lt;/p&gt;

&lt;p&gt;近々もっと大きいのを別途買おうかなと思ってます。&lt;/p&gt;

&lt;h3 id=&#34;平和工業-ゴミ箱-ペダルペール-40l-http-amzn-to-2iqnnvd&#34;&gt;&lt;a href=&#34;http://amzn.to/2iQnNVd&#34;&gt;平和工業 ゴミ箱 ペダルペール 40L&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00SSRNN2E&amp;linkId=9c76c50fa82f530d763c9c042225fcb3&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00SSROVUW&amp;linkId=f3647109a8d2247bffefa69d49706a19&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;キッチン用に買いました。&lt;/p&gt;

&lt;p&gt;特に夏場は虫が来ないようにフタ付きなのが良いのと、料理中とかで手がふさがっている状態でも使えるようペダル付きのものを探していました。&lt;/p&gt;

&lt;p&gt;割としっかりしているので、壁際に置いておけばルンバがガンガン当たっても全然問題ないのも良いです。&lt;/p&gt;

&lt;h3 id=&#34;ねこのロールペーパーホルダー-クロ-http-amzn-to-2iprixe&#34;&gt;&lt;a href=&#34;http://amzn.to/2iPriXE&#34;&gt;ねこのロールペーパーホルダー クロ&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00E37ADOE&amp;linkId=2565e50707b82a8ffe9e6d1d105f42b3&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;特に便利とかではないですが、猫がトイレットペーパーを抱えているみたいになって可愛いので気に入ってます。&lt;/p&gt;

&lt;h2 id=&#34;料理編&#34;&gt;料理編&lt;/h2&gt;

&lt;h3 id=&#34;ツインバード-タイマー付きスロークッカー-ぜっぴん亭-http-amzn-to-2ipe25q&#34;&gt;&lt;a href=&#34;http://amzn.to/2iPe25q&#34;&gt;ツインバード　タイマー付きスロークッカー　ぜっぴん亭&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00HWLI8SQ&amp;linkId=937e09917b9002ad4f62235fd3f8dbaf&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;引越す前はコンロのついていない部屋だったので、ずっと一口の IH で料理を作っていましたが、引越先はガスコンロが 3 口になったので料理がしやすくなりました。&lt;/p&gt;

&lt;p&gt;まぁそれは良かったんですが、IH と違ってタイマーでの調理はできないので、例えばポトフとかを作る時に放置しておくのが難しくなってしまいました。&lt;/p&gt;

&lt;p&gt;そこで他の種類の調理器具も検討しましたが、結果スロークカーを選びました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2is1eWe&#34;&gt;シャトルシェフ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;放置できる点は良かったものの、火力が必要な調理はできなさそうだったので見送り&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;圧力鍋

&lt;ul&gt;
&lt;li&gt;時短調理ができるという意味では別アプローチからの良さはあるものの、これも放置はしにくいので見送り&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;スロークッカーは電気だけなので放置しやすいですし、基本的には材料を詰め込んでタイマーをセットするだけなので調理の再現性が高いのも良いです。&lt;/p&gt;

&lt;p&gt;ツインバード社からは同等のスペックで別カラーのものも出ていますが、このオレンジのものはスロークッカー用のレシピブックが付いている点でもオススメです。&lt;/p&gt;

&lt;p&gt;個人的にお気に入りのレシピは以下です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://damndelicious.net/2013/11/02/slow-cooker-crockpot-honey-sesame-chicken/&#34;&gt;SLOW COOKER HONEY SESAME CHICKEN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://allrecipes.com/recipe/16066/awesome-slow-cooker-pot-roast/&#34;&gt;Awesome Slow Cooker Pot Roast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lecremedelacrumb.com/slow-cooker-broccoli-beef/&#34;&gt;SLOW COOKER BROCCOLI BEEF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まぁ一番よく作ったのは適当に野菜やら何やらを切って適当に加熱しただけのポトフなんですが。&lt;/p&gt;

&lt;p&gt;スロークッカーを購入する上で、以下の記事から受けた触発された部分は大きかったので、この場でお礼申し上げます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://rimuru.lunanet.gr.jp/notes/post/bought-a-slow-cooker/&#34;&gt;スロークッカーを買って2週間が経った&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デカめの肉を調理する上ではアメリカっぽい横長のものも便利そうなので、そのうち買うかもしれません。&lt;/p&gt;

&lt;h3 id=&#34;tanica-ヨーグルティア-http-amzn-to-2hctfnj&#34;&gt;&lt;a href=&#34;http://amzn.to/2hCTfnJ&#34;&gt;TANICA ヨーグルティア&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B002SV0BL2&amp;linkId=0b59c6fbd9441f6088319afc4001ee4d&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;いわゆるヨーグルトメーカーですが、ヨーグルトではなく肉をはじめとした食材の真空低温調理に使用しました。&lt;br /&gt;
要は Poor man&amp;rsquo;s &lt;a href=&#34;http://amzn.to/2iQ5NtT&#34;&gt;Anova&lt;/a&gt; ですね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://long-reviews.hatenablog.com/entry/2016/01/18/230017&#34;&gt;【ヨーグルティアで低温調理】失敗知らずのローストビーフ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://everyday.iroiro7.com/?p=1303&#34;&gt;ヨーグルティアでの鳥ハムの作り方｜鳥胸肉もしっとり　塩麹or塩で&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://magazine.shokuikuclub.jp/kitchen/20140818_050008/&#34;&gt;サーモンは低温でコンフィをすると滑らかな食感に&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ローストビーフはかなり作りましたし、鳥はむは 1g 1 円程度の安い肉でもちゃんとおいしくなるので楽しいです。&lt;br /&gt;
同居人がサーモンアレルギーなのであまり作りませんでしたが、一番美味しかったのはサーモンのコンフィでした。これは家に来た友人をもてなした時にも喜ばれました。&lt;/p&gt;

&lt;p&gt;最初はヨーグルトも作っていましたが、種になるヨーグルトを 400g 買って、そのうち 100g から 1kg のヨーグルトを作っては食べ、というサイクルだと、元のヨーグルトの賞味期限が切れてしまい、うまく食べきれないことが多かったのでやめてしまいました。&lt;/p&gt;

&lt;p&gt;ヨーグルティアの購入・運用にあたっては以下の記事が大変参考になったのでお礼申し上げます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kwappa.net/blog/archives/1995&#34;&gt;まだアクチンの熱変性で消耗してるの？ – 低温調理による革命的肉食のすすめ – #ヨーグルティア肉&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://portal.nifty.com/kiji/150203192686_1.htm&#34;&gt;ヨーグルトメーカーで肉を煮る&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もちろん小林銅蟲さんの&lt;a href=&#34;http://negineesan.hatenablog.com/&#34;&gt;ブログ&lt;/a&gt;・漫画にも大いに触発れました。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01N8Q8DA7&amp;linkId=bbd088ef5aa8cd3e4fef081a17bc496d&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;そして以下の書籍も読みました。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4873115094&amp;linkId=71b460407075c773d819b230f0323b76&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4903063577&amp;linkId=81b2b29eb7920d68d53250627b0ac8d2&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&#34;http://amzn.to/2iQ6gfw&#34;&gt;Cooking for Geeks は第二版の日本語版&lt;/a&gt;もつい最近出たようなのでそのうち買いなおそうと思います。&lt;/p&gt;

&lt;h3 id=&#34;タニタ-スティック温度計-http-amzn-to-2iplq0b&#34;&gt;&lt;a href=&#34;http://amzn.to/2iPlq0B&#34;&gt;タニタ スティック温度計&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0017TCOEI&amp;linkId=1d2fbe9a9b16bf5267fe61b125b3b228&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;低温調理は迂闊にやるときわどい感じになってしまうので、温度に気をつける必要があって買いました。&lt;/p&gt;

&lt;p&gt;ヨーグルティアを使えば温度の維持は勝手にやってくれますが、それでも立ち上がりの温度に気をつける必要があります。&lt;br /&gt;
特に鶏肉・豚肉・生魚の時なんかは、水から初めてしまうと菌が繁殖しやすい温度の中で時間が経過してしまい、大変危険です。&lt;br /&gt;
あらかじめ目的の温度に上げたお湯を用意しておく必要があります。&lt;/p&gt;

&lt;p&gt;あとはステーキなんかを焼く時にもよく使いました。&lt;br /&gt;
肉の種類・部位や大きさなどにもよりますが、中心温度が 45 度ぐらいまで上がればあとは余熱で上昇していくので、アクチンが熱変性する 65 ℃ を超えないようにうまく調整するのに使いました。&lt;/p&gt;

&lt;p&gt;温度計はいろいろありますが、この安さで必要な仕事をちゃんとやってくれるところが気に入っています。&lt;/p&gt;

&lt;h3 id=&#34;タニタ-デジタルクッキングスケール-http-amzn-to-2hzkgvy&#34;&gt;&lt;a href=&#34;http://amzn.to/2hzkGvy&#34;&gt;タニタ デジタルクッキングスケール&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B007JP7E6C&amp;linkId=d55eceaf72e2be01f7e3aa0fab895500&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;肉ばっかり食べてる感じになってしまいましたが、それ以上に野菜を意識的に食べた 1 年でした。&lt;br /&gt;
たまに意識の低下した日を除けば、基本的に毎日 350g の野菜を食べ続けたと思います。&lt;/p&gt;

&lt;p&gt;平日は時間がないので野菜・きのこ・肉を適当に蒸しただけの料理とは言えないような代物を作ることも多かったですが、ちゃんと図って作りました。&lt;/p&gt;

&lt;h3 id=&#34;k-a-みじん切り器-ぶんぶんチョッパー-http-amzn-to-2iqlgas&#34;&gt;&lt;a href=&#34;http://amzn.to/2iQlGAs&#34;&gt;K&amp;amp;A みじん切り器 ぶんぶんチョッパー&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00WDZYLT6&amp;linkId=a0d50b5dbf80bef14462b0bd93c2bf33&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;これは小物ですが、とても良かったです。&lt;br /&gt;
中に玉ねぎとかニンニクとかを入れて、紐を引っ張るだけで電気もなしにみじん切りが出来上がります。&lt;/p&gt;

&lt;p&gt;先日 &lt;a href=&#34;https://connpass.com/event/45509/&#34;&gt;Recruit.rb #0&lt;/a&gt; という Ruby 勉強会でも、&lt;a href=&#34;https://twitter.com/remore&#34;&gt;@remore&lt;/a&gt; さんとスロークッカーの話とともに盛り上がりました。 (Ruby 関係ない)&lt;/p&gt;

&lt;p&gt;これについては映像で見てもらうのが一番わかりやすいと思います。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/572m44-cFgY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;唯一困るのは洗うときです。&lt;br /&gt;
中の紐の部分が濡れてしまうと、乾かすのが大変 (巻き戻ってしまう) なので、容器とフタの間にサランラップを挟んで、汚れないようにして使っています。&lt;/p&gt;

&lt;h2 id=&#34;健康編&#34;&gt;健康編&lt;/h2&gt;

&lt;h3 id=&#34;フィリップス-電動歯ブラシ-ソニッケアー-ダイヤモンドクリーン-http-amzn-to-2iiwof4&#34;&gt;&lt;a href=&#34;http://amzn.to/2iiwOF4&#34;&gt;フィリップス 電動歯ブラシ ソニッケアー ダイヤモンドクリーン&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00NXEYMB8&amp;linkId=bd56f8f4c02238a1de1f52cba54ade48&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;歯医者さんに勧められて買いました。&lt;/p&gt;

&lt;p&gt;長年手動で歯磨きしてきましたが、もう戻れないと思います。かなりスッキリします。&lt;/p&gt;

&lt;p&gt;Amazon レビューとかでよく、すぐ壊れてしまった、という人がいるんですが、ボタンのところから水が入って壊れることが多いようなのでそれだけ気をつけて使っています。&lt;/p&gt;

&lt;h3 id=&#34;フッ素付きデンタルフロス-http-amzn-to-2hcrxcw&#34;&gt;&lt;a href=&#34;http://amzn.to/2hCRxCW&#34;&gt;フッ素付きデンタルフロス&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B009UPW1G2&amp;linkId=db1006db78e1e4a4216cba266a60c0e3&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;これは同じ歯医者で歯石除去をしてもらった後に、歯科衛生士の方に勧められて買いました。&lt;/p&gt;

&lt;p&gt;これまでこういうのを使ったことがなかったので最初は面倒だったんですが、毎日結構な汚れが取れるので、やらねばという感じが出ています。&lt;/p&gt;

&lt;h3 id=&#34;withings-スマート体重計-smart-body-analyzer-http-amzn-to-2hzkqgc&#34;&gt;&lt;a href=&#34;http://amzn.to/2hzkqgc&#34;&gt;Withings スマート体重計 Smart Body Analyzer&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00V35HEIC&amp;linkId=503a07067ee510f28b25b237be0e2dc3&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;去年末から今年の始めにかけては忙しかったこともあって食生活が破滅しかけており、健康診断の結果も悪く、お腹の周りにも明らかに余計な肉がついてしまっていました。&lt;/p&gt;

&lt;p&gt;そこで買ったのがこれです。&lt;br /&gt;
当時は 15000 円ぐらいで買い増したが、今は&lt;a href=&#34;http://amzn.to/2iism9z&#34;&gt;新しいモデル&lt;/a&gt;が出ていることもあってさらに安くなっているようです。&lt;/p&gt;

&lt;p&gt;タニタのやつなんかも検討しましたが、体重等のデータが API から取得できる、ということもあって Withings を選びました。&lt;br /&gt;
(結局アプリがしっかりしているので API は使っていませんが)&lt;/p&gt;

&lt;p&gt;これを買ってからは徐々に体重も落ち着いて行き、元の体重で安定するようになり、お腹の周りの余計な肉も消え去っています。&lt;/p&gt;

&lt;p&gt;以下は Withings のアプリで見られるグラフです。&lt;br /&gt;
まぁ身長 180cm でこれは軽すぎなので、来年は体脂肪を維持しつつ筋肉で体重を増やしていくのが目標です。&lt;/p&gt;

&lt;h4 id=&#34;体重&#34;&gt;体重&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.yuyat.jp/images/best-buys-2016/weight.png&#34; width=&#34;963&#34; height=&#34;558&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;体脂肪率&#34;&gt;体脂肪率&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.yuyat.jp/images/best-buys-2016/fatmass.png&#34; width=&#34;963&#34; height=&#34;558&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;bmi&#34;&gt;BMI&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.yuyat.jp/images/best-buys-2016/bmi.png&#34; width=&#34;960&#34; height=&#34;556&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;withings-スマートウォッチ-activité-pop-http-amzn-to-2isr4js&#34;&gt;&lt;a href=&#34;http://amzn.to/2isr4Js&#34;&gt;Withings スマートウォッチ Activité Pop&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B010UV1M6O&amp;linkId=530407bb2025a37761aaed694083858e&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Withings の体重計を買ってしばらくして買いました。&lt;/p&gt;

&lt;p&gt;Apple Watch 以降スマートウォッチは気になっていたものの、充電が持たないものは辛かったので、スルーし続けていました。&lt;br /&gt;
その点この Activité シリースが良いのは、充電できない代わりに、ボタン電池で 8 ヶ月持つところです。&lt;br /&gt;
充電に関するストレスが一切ないのは大きいと思います。&lt;/p&gt;

&lt;p&gt;機能的には歩数・睡眠時間を勝手にトラッキングしてくれるものです。&lt;/p&gt;

&lt;p&gt;歩数はそんなに制度は高くないと思いますが、まぁ目標の歩数を超えるように意識するようになるだけでも良いと思います。&lt;br /&gt;
睡眠に関しても同様で、精度的にはもっと良いものがあるんじゃないかとは思います。&lt;/p&gt;

&lt;p&gt;防水で水泳もトラッキングしてくれますが、つけたまま風呂に入ると中が曇ってしまうので、風呂の時だけ外してそれ以外は文字通り 1 日中つけていました。&lt;/p&gt;

&lt;p&gt;というわけで体験としてはとても良かったんですが、残念なことについ先日同期ができなくなってしまいました&amp;hellip;&lt;/p&gt;

&lt;p&gt;上位モデルの &lt;a href=&#34;http://amzn.to/2isskfD&#34;&gt;Activité Steel&lt;/a&gt; を買おうとも思っていますが、壊れやすさについてはもうちょっと調べて考え中です。&lt;/p&gt;

&lt;p&gt;ところで Withings に関しては今年 1 年でファンになったんですが、今年&lt;a href=&#34;http://wired.jp/2016/04/28/nokia-buys-withings/&#34;&gt;ノキアに買収されてしまって&lt;/a&gt;、今後どうなってしまうのか気になるところです (悪い意味で)。&lt;/p&gt;

&lt;h2 id=&#34;エンタメ編&#34;&gt;エンタメ編&lt;/h2&gt;

&lt;h3 id=&#34;playstation3-http-amzn-to-2iqpadl&#34;&gt;&lt;a href=&#34;http://amzn.to/2iQpaDl&#34;&gt;PlayStation3&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00MGDX5CO&amp;linkId=c1e1c55408bb540f08ef652f5b58d04b&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;PS4 も出て久しい今なぜ PS3 を買ったかというと、ブルーレイが見たかったからです。&lt;br /&gt;
なおかつ PS3 は北米版のものでも再生できるということで Mercari で買いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2iAh0eV&#34;&gt;ゆゆ式：コンプリート・コレクション 北米版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2iiuUo3&#34;&gt;TARI TARI：コンプリート・コレクション 北米版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特にゆゆ式はディスク交換なしで全話一気に見られるのも良いエクスペリエンスでした。&lt;/p&gt;

&lt;h3 id=&#34;shirobako-初回生産限定板-dvd-全巻-http-amzn-to-2iapcf0&#34;&gt;&lt;a href=&#34;http://amzn.to/2iApcf0&#34;&gt;SHIROBAKO 初回生産限定板 DVD 全巻&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00OJXVWIS&amp;linkId=ecac6082002cef1289084831d027882d&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00OJXVTZY&amp;linkId=4dc50f19798c301cce534f46b19f408f&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00OJXVWN8&amp;linkId=3f3bea985f1d8cb22a3f64e431065f58&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00OJXVVDO&amp;linkId=6f5daede1b02fbb4289e5e20a668ac7c&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00OJXVXSM&amp;linkId=7903613462f69afa2729223c31850edd&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00OJXVVBG&amp;linkId=acac1f0ea18332c41705ca76f60dc4b0&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00OJXVWK6&amp;linkId=6c369f8fe839c502503888fcdb55f947&#34;&gt;&lt;/iframe&gt;
&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00OJXVTZ4&amp;linkId=4846eed6d283328fa1c23f9d13185dc3&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;PS3 を買う前だったので DVD で買いました。&lt;/p&gt;

&lt;p&gt;リアルタイムでも見ましたし、その後もテレビやニコニコの一挙放送なんかで見たと思いましたが、結局買ってしまいました。 (ちょうどテレビの一挙放送がきっかけで買った気がする)&lt;/p&gt;

&lt;p&gt;杉江 3 日伝説について菅野さんが熱弁するところは何度見てもニヤニヤが止まりませんし、小笠原さんにバッティングセンターに連れて行かれる話のネタの細かさも好きです。&lt;/p&gt;

&lt;h3 id=&#34;patech-bluetooth-3-0-ワイヤレススピーカー-http-amzn-to-2iqlcrc&#34;&gt;&lt;a href=&#34;http://amzn.to/2iQlCRc&#34;&gt;Patech　Bluetooth 3.0　ワイヤレススピーカー&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00NFGTRNC&amp;linkId=9a3710935f6e248be2782f6031e655e8&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;風呂で Podcast を聞くのに使いました。&lt;/p&gt;

&lt;p&gt;防水なので安心して風呂に持ち込めますし、ペアリングも簡単で、かつ値段も安いのでオススメです。&lt;/p&gt;

&lt;h2 id=&#34;スマートフォン編&#34;&gt;スマートフォン編&lt;/h2&gt;

&lt;h3 id=&#34;iphone-se-http-amzn-to-2hzps2u&#34;&gt;&lt;a href=&#34;http://amzn.to/2hzpS2u&#34;&gt;iPhone SE&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01GC5DYXG&amp;linkId=61dff948ba67c324c038ed47099a5cb7&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;iPhone 5 を 3 年ぐらい使い続けていましたが、ようやく買い換えました。&lt;/p&gt;

&lt;p&gt;iPhone 6 のデカさに二の足を踏んでいましたが、今となっては待って良かったと思います。 (やや妥協感はあるものの)&lt;/p&gt;

&lt;h3 id=&#34;iphone-se-iphone5-5s-icカード-スロットイン-収納-ケース-http-amzn-to-2iqlh7z&#34;&gt;&lt;a href=&#34;http://amzn.to/2iQlH7z&#34;&gt;iPhone SE / iPhone5/5S ICカード スロットイン 収納 ケース&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00AK4OXUE&amp;linkId=91421700b5d3ed3785c577853fe19b49&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;iPhone SE と一緒に買いました。&lt;/p&gt;

&lt;p&gt;長年 iPhone とガラケーの二台持ちで、ガラケーでモバイル Suica を使い続けていたんですが、通勤が銀座線オンリーになったことで、モバイル Suica の定期券が買えなくなってしまいました。&lt;/p&gt;

&lt;p&gt;モバイル Suica は本当に便利だったので残念でしたが、しょうがないので PASMO をこのケースに入れて通勤するようになりました。&lt;br /&gt;
移動中の電車の中でチャージしたり定期の更新ができなくなったのは辛いですが、定期は半年分買って、チャージも少し多めにしておけばたまにするだけで良いので、まぁ満足しています。&lt;/p&gt;

&lt;h2 id=&#34;その他小物編&#34;&gt;その他小物編&lt;/h2&gt;

&lt;h3 id=&#34;anker-powerport-4-40w-4ポートusb急速充電器-http-amzn-to-2iidief&#34;&gt;&lt;a href=&#34;http://amzn.to/2iiDiEf&#34;&gt;Anker PowerPort 4 (40W 4ポートUSB急速充電器)&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B00VTJS58U&amp;linkId=85511f7be0e0adbca821a5b6b39449b7&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;今年はこれを合計 3 つ買って、自宅のリビングと寝室、そしてオフィスの机の上で使っています。&lt;/p&gt;

&lt;p&gt;充電を使い切ることがほぼないので急速充電のメリットは特に感じていませんが、4 ポートあると安心感があって良いです。&lt;/p&gt;

&lt;p&gt;Anker の同様の製品の中にはポートが死にやすいものがあったり、品質面に不安はありましたが、事前に調べた段階でこの 4 ポートのものは不具合の報告が少なく、実際使ってみてもトラブルなく使えています。&lt;/p&gt;

&lt;h3 id=&#34;コクヨ-ペンケース-ネオクリッツフラット-http-amzn-to-2ippkgk&#34;&gt;&lt;a href=&#34;http://amzn.to/2iPpkGK&#34;&gt;コクヨ ペンケース ネオクリッツフラット&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B01AHDWS90&amp;linkId=21b2d7a22c2e292567c2e3c0408d03c4&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;就職して以降筆記用具はほとんど使わなくなりましたが、それでも必要な時はどうしてもあるので常に持っています。&lt;/p&gt;

&lt;p&gt;これはペン立てにもなるのが面白くて好きです。&lt;/p&gt;

&lt;h2 id=&#34;番外編&#34;&gt;番外編&lt;/h2&gt;

&lt;h3 id=&#34;パナソニック-食器洗い乾燥機-np-tcr3-w-http-amzn-to-2hzvroa&#34;&gt;&lt;a href=&#34;http://amzn.to/2hzvRoa&#34;&gt;パナソニック 食器洗い乾燥機 NP-TCR3-W&lt;/a&gt;&lt;/h3&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=yuyat-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B014IIKWR0&amp;linkId=97bb93f0daf197e8bd4c2f657bfb7419&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;今日届きました！&lt;br /&gt;
買って良かったかどうかは書き用がないですが、これからの活躍が期待されます。&lt;/p&gt;

&lt;p&gt;見積もりの時点で「水道が古すぎてダメかもしれない」と言われていたので、ダメだった場合は水道工事に関して管理会社と交渉が必要そうな状況でしたが、なんとか無事に設置が完了し、安心して年を越せます。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今年は主に生活を楽にする家電をいろいろ買いました。&lt;/p&gt;

&lt;p&gt;生活への投資という方向性は今後も継続していきたいですが、2017 年は家電のスマート化とかにもチャレンジして行って、ブログネタにしていきたいです。&lt;/p&gt;

&lt;p&gt;あとは自宅のプログラミング環境についてはあまり投資ができずに終わってしまったので、その辺もなんとかしていきたいですね。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>