<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Born Too Late</title>
    <link>https://blog.yuyat.jp/</link>
    <description>Recent content on Born Too Late</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 12 May 2017 00:46:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.yuyat.jp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>peco で S3 のバケット・ファイル一覧を見るやつを作ったらめちゃくちゃ便利なのができた</title>
      <link>https://blog.yuyat.jp/post/peco-s3.zsh/</link>
      <pubDate>Fri, 12 May 2017 00:46:00 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/peco-s3.zsh/</guid>
      <description>&lt;p&gt;釣りっぽいタイトルにしてしまったけどまぁ主観なので&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/peco-s3.zsh&#34;&gt;yuya-takeyama/peco-s3.zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MongoMapper で Mass Assignment を自動検出する</title>
      <link>https://blog.yuyat.jp/post/automatic-mass-assignment-detection-for-mongomapper/</link>
      <pubDate>Thu, 13 Apr 2017 01:14:30 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/automatic-mass-assignment-detection-for-mongomapper/</guid>
      <description>&lt;p&gt;GitHub が &lt;a href=&#34;https://www.infoq.com/jp/news/2012/03/GitHub-Compromised&#34;&gt;Mass Assignment 脆弱性を突かれて&lt;/a&gt;からもう 5 年も経っているんですね。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ActiveRecord&lt;/code&gt; (というか &lt;code&gt;ActiveModel&lt;/code&gt;) では適切に &lt;code&gt;.permit&lt;/code&gt; したパラメータ以外は &lt;code&gt;ActiveModel::ForbiddenAttributesError&lt;/code&gt; が発生するようになっていますが、&lt;code&gt;MongoMapper&lt;/code&gt; ではそうなってなかったので対応させてみました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Heroku で Resque を Graceful Shutdown する</title>
      <link>https://blog.yuyat.jp/post/graceful-shutdown-resque-in-heroku/</link>
      <pubDate>Mon, 10 Apr 2017 02:02:59 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/graceful-shutdown-resque-in-heroku/</guid>
      <description>&lt;p&gt;Heroku で Resque を動かす場合、何も考えないでセットアップすると、デプロイによるプロセスの再起動時や、Dyno のスケールダウン時に Worker プロセスが強制終了され、&lt;code&gt;Resque::DirtyExit&lt;/code&gt; としてエラーになってしまいます。&lt;/p&gt;

&lt;p&gt;これを避けるために正しく &lt;strong&gt;Graceful Shutdown&lt;/strong&gt; する方法について調べてみました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js のスタックトレースを控えめにする supress-stack-trace 書いた</title>
      <link>https://blog.yuyat.jp/post/supress-stack-trace/</link>
      <pubDate>Wed, 29 Mar 2017 02:21:11 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/supress-stack-trace/</guid>
      <description>&lt;p&gt;最近仕事で React/Redux で構築されたアプリを触っていて、&lt;a href=&#34;https://mochajs.org/&#34;&gt;mocha&lt;/a&gt; でテストがコケたときのスタックトレースがうるさい感じだったので &lt;code&gt;node_modules&lt;/code&gt; 内のエラーを除外するためのものを作ってみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/supress-stack-trace&#34;&gt;yuya-takeyama/supress-stack-trace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ruby で週をオブジェクトとして扱うライブラリ ActiveWeek を作った</title>
      <link>https://blog.yuyat.jp/post/activeweek/</link>
      <pubDate>Mon, 09 Jan 2017 03:02:40 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/activeweek/</guid>
      <description>&lt;p&gt;仕事で必要があって作ったものから仕事固有の事情とかを取り除いた形で作り直してみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/activeweek&#34;&gt;yuya-takeyama/activeweek&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>引越・同棲 1 年目の 2016 年に買って良かったもの</title>
      <link>https://blog.yuyat.jp/post/best-buys-2016/</link>
      <pubDate>Sat, 31 Dec 2016 19:49:41 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/best-buys-2016/</guid>
      <description>&lt;p&gt;去年 1 番のイベントは&lt;a href=&#34;http://blog.yuyat.jp/archives/2631&#34;&gt;転職&lt;/a&gt;でしたが、今年は引越・同棲というのが一大イベントでした。&lt;/p&gt;

&lt;p&gt;丸 7 年住んだ埼玉から浅草に引越したことで京橋の職場への出勤時間が半分の 30 分に縮まったのも良かったですが、生活環境が変わったのを機に家具も色々と買い、QoL も大幅に向上したので、それを振り返ってみるという体でアフィブログを書きます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>instance_eval で特異メソッドを定義する</title>
      <link>https://blog.yuyat.jp/post/defining-singleton-methods-with-instance_eval/</link>
      <pubDate>Sun, 25 Dec 2016 04:29:36 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/defining-singleton-methods-with-instance_eval/</guid>
      <description>&lt;p&gt;最近 &lt;a href=&#34;https://github.com/yuya-takeyama/flagship&#34;&gt;Flagship&lt;/a&gt; という機能フラグを Ruby の言語内 DSL で定義する gem を作っていて、その中で出てきた DSL 定義パターンっぽいものをメモ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BigQuery の標準 SQL モードで日付テーブルのフィルタリング、または Re:dash の Query Snippets を活用する話</title>
      <link>https://blog.yuyat.jp/post/filtering-tables-in-bigquery-standard-sql/</link>
      <pubDate>Sun, 04 Dec 2016 23:47:21 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/filtering-tables-in-bigquery-standard-sql/</guid>
      <description>&lt;p&gt;要は Legacy SQL モード で &lt;code&gt;FROM (TABLE_DATE_RANGE(dataset.table_, TIMESTAMP(&#39;2016-01-01&#39;), TIMESTAMP(&#39;2016-01-14&#39;)))&lt;/code&gt; とか書いていたのを標準 SQL でどう書くか、という話です。&lt;br /&gt;
すぐ忘れるのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitHub の Issue を作るコマンド ghissue を作った</title>
      <link>https://blog.yuyat.jp/post/ghissue-a-command-to-create-github-issues/</link>
      <pubDate>Sun, 27 Nov 2016 02:43:58 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/ghissue-a-command-to-create-github-issues/</guid>
      <description>&lt;p&gt;作りました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/ghissue&#34;&gt;yuya-takeyama/ghissue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ruby で Dir.glob して require するときは sort してからにする</title>
      <link>https://blog.yuyat.jp/post/make-sure-loading-order-to-be-consistent/</link>
      <pubDate>Sun, 23 Oct 2016 16:39:29 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/make-sure-loading-order-to-be-consistent/</guid>
      <description>以下のように特定のディレクトリ配下のファイルを雑に require することがあるとする。
Dir.glob(&#39;./lib/**/*.rb&#39;).each {|f| require f }  これだと読み込み順が一定でないので、場合によっては A というクラスが依存している B というクラスを読み込む前に参照しようとして NameError にったりする。
# a.rb class A &amp;lt; B end # b.rb class B end  もちろん、これは a.rb の先頭で require &#39;b.rb&#39; すればいい話ではある。
だが問題は、テスト中はたまたま問題なくいっていたものが本番で急にエラーになったりすることである。
そのため事前に sort しておくと良い。
Dir.glob(&#39;./lib/**/*.rb&#39;).each.sort {|f| require f }  これならファイルの読み込み順序は一定になる、はず。 (OS やファイルシステムによって違う可能性もあり得る?)</description>
    </item>
    
    <item>
      <title>Docker コンテナを DigitalOcean 上でサクッと動かす</title>
      <link>https://blog.yuyat.jp/post/run-docker-container-in-digitalocean/</link>
      <pubDate>Tue, 11 Oct 2016 21:29:41 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/run-docker-container-in-digitalocean/</guid>
      <description>&lt;h2 id=&#34;やりたいこと&#34;&gt;やりたいこと&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;任意のアプリの Docker コンテナをサクッと立ち上げたい&lt;/li&gt;
&lt;li&gt;かつグローバル IP アドレスを割り当てて外から接続したい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;より具体的には、今回は &lt;code&gt;mitmproxy&lt;/code&gt; をインターネット上で動かして iPhone 等のスマートフォン端末からつなぎたかった、という感じです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker のメトリクスを Re:dash でビジュアライズ</title>
      <link>https://blog.yuyat.jp/post/visualize-docker-metrics-with-redash/</link>
      <pubDate>Sun, 02 Oct 2016 14:56:46 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/visualize-docker-metrics-with-redash/</guid>
      <description>&lt;p&gt;しばらく前から &lt;a href=&#34;http://dokku.viewdocs.io/dokku/&#34;&gt;Dokku&lt;/a&gt; という Docker ベースの Heroku ライクな PaaS 基盤を趣味で運用していて、その中で旧ブログの WordPress や 自分用のツールなんかを動かしたりしている。&lt;/p&gt;

&lt;p&gt;サーバのメトリクス収集には &lt;a href=&#34;https://mackerel.io/&#34;&gt;Mackerel&lt;/a&gt; を利用しているが、Docker コンテナ単位での計測は行っていなかった。&lt;br /&gt;
Mackerel はホスト数に応じた課金を行っていて、5 ホストまでは無料だが、コンテナまで追加してしまうとすぐにその枠を溢れてしまう。&lt;/p&gt;

&lt;p&gt;というわけで簡単な仕組みを自分で用意いてみた。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【RMP×Quipper】Food&amp;Drink meetup #3 で発表した</title>
      <link>https://blog.yuyat.jp/post/rmp-quipper-food-and-drink-meetup/</link>
      <pubDate>Sat, 01 Oct 2016 16:41:07 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/rmp-quipper-food-and-drink-meetup/</guid>
      <description>&lt;p&gt;Quipper とその親会社であるところのリクルートマーケティングパートナーズ (RMP) とでの&lt;a href=&#34;http://rmp-quipper.connpass.com/event/39082/&#34;&gt;合同イベント&lt;/a&gt; (平たくいうと採用イベント) があって、LT の発表枠が空いていたので発表してきた。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>curl でレスポンスタイムをシュッと取るヤツ</title>
      <link>https://blog.yuyat.jp/post/stuff-to-get-response-time-with-curl/</link>
      <pubDate>Tue, 27 Sep 2016 09:10:34 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/stuff-to-get-response-time-with-curl/</guid>
      <description>&lt;p&gt;以前 Qiita に&lt;a href=&#34;http://qiita.com/yuya_takeyama/items/baf48a3f643e743a46b4&#34;&gt;curl でサッと HTTP ベンチマーク&lt;/a&gt;と書いたが、それをもうちょい簡単にやるために以下のようなコマンドを用意してみた。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>標準エラー出力に tee するコマンド tee2err を作った</title>
      <link>https://blog.yuyat.jp/post/tee2err/</link>
      <pubDate>Mon, 26 Sep 2016 01:00:24 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/tee2err/</guid>
      <description>&lt;p&gt;GNU tee でも BSD tee でもできないので作りました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/tee2err&#34;&gt;yuya-takeyama/tee2err&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitHub Pages を nginx のリバースプロキシ越しに配信する</title>
      <link>https://blog.yuyat.jp/post/serving-github-pages-through-reverse-proxy/</link>
      <pubDate>Sun, 25 Sep 2016 17:57:40 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/serving-github-pages-through-reverse-proxy/</guid>
      <description>&lt;p&gt;このブログは&lt;a href=&#34;https://blog.yuyat.jp/post/auto-deploy-hugo-to-github-pages-with-circleci/&#34;&gt;以前の記事&lt;/a&gt;にも書いた通り、&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; から配信しています。&lt;/p&gt;

&lt;p&gt;そしてさらに、前段に nginx のリバースプロキシを置いた構成になってます。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt の証明書を Ansible と certbot で Nginx にインストール &amp; 自動更新</title>
      <link>https://blog.yuyat.jp/post/auto-renew-letsencrypt-cert-keys-with-ansible-and-certbot/</link>
      <pubDate>Mon, 19 Sep 2016 14:12:38 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/auto-renew-letsencrypt-cert-keys-with-ansible-and-certbot/</guid>
      <description>&lt;p&gt;これも&lt;a href=&#34;https://blog.yuyat.jp/post/brand-new-blog/&#34;&gt;リニューアル&lt;/a&gt;ネタです。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo で作ったサイトを CircleCI で GitHub Pages に自動デプロイ</title>
      <link>https://blog.yuyat.jp/post/auto-deploy-hugo-to-github-pages-with-circleci/</link>
      <pubDate>Mon, 19 Sep 2016 10:30:35 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/auto-deploy-hugo-to-github-pages-with-circleci/</guid>
      <description>&lt;p&gt;Hugo は Jekyll と違って、GitHub Pages に push しても勝手にページ生成はされません。&lt;br /&gt;
どうにかして自分で Hugo を実行し、それで生成されたファイルを push する必要があります。&lt;br /&gt;
このブログを構築するにあたって、CircleCI でビルドして自動デプロイする手順がまとまったので公開します。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ブログを Hugo でリニューアルした</title>
      <link>https://blog.yuyat.jp/post/brand-new-blog/</link>
      <pubDate>Mon, 19 Sep 2016 02:39:31 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/brand-new-blog/</guid>
      <description>&lt;p&gt;長年 Wordpress を使ってきたけどいい加減辛くなってきたので &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; に移行しました。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>