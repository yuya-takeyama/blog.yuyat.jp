<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Born Too Late</title>
    <link>https://blog.yuyat.jp/post/</link>
    <description>Recent content in Posts on Born Too Late</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 19 Sep 2016 14:12:38 +0900</lastBuildDate>
    <atom:link href="https://blog.yuyat.jp/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Let&#39;s Encrypt の証明書を Ansible と certbot で Nginx にインストール &amp; 自動更新</title>
      <link>https://blog.yuyat.jp/post/auto-renew-letsencrypt-cert-keys-with-ansible-and-certbot/</link>
      <pubDate>Mon, 19 Sep 2016 14:12:38 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/auto-renew-letsencrypt-cert-keys-with-ansible-and-certbot/</guid>
      <description>

&lt;p&gt;これも&lt;a href=&#34;https://blog.yuyat.jp/post/brand-new-blog/&#34;&gt;リニューアル&lt;/a&gt;ネタです。&lt;/p&gt;

&lt;h2 id=&#34;やりたいこと&#34;&gt;やりたいこと&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s Encrypt の証明書を Ansible でインストールする&lt;/li&gt;
&lt;li&gt;その後の証明書の更新も自動で行うようにする

&lt;ul&gt;
&lt;li&gt;その設定もやはり Ansible で行う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;前提とする環境&#34;&gt;前提とする環境&lt;/h2&gt;

&lt;p&gt;Ubuntu 16.04 だと certbot が apt-get でインストールできますが、それ未満だと &lt;a href=&#34;https://certbot.eff.org/all-instructions/#ubuntu-14-04-trusty-apache&#34;&gt;certbot-auto&lt;/a&gt; というコマンドを手動でインストールする必要があります。&lt;br /&gt;
中身はほぼ同じだと思いますが、そちらについての説明はしません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 16.04&lt;/li&gt;
&lt;li&gt;Ansible 2.1.1.0&lt;/li&gt;
&lt;li&gt;nginx 1.10.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;

&lt;h3 id=&#34;certbot-のインストール&#34;&gt;certbot のインストール&lt;/h3&gt;

&lt;p&gt;certbot とは Let&amp;rsquo;s Encrypt の証明書の取得や更新を自動化するためのコマンドラインツールです。&lt;/p&gt;

&lt;p&gt;こんな感じの playbook でインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;- name: install certbot
  apt: name=letsencrypt state=present update_cache=yes
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;証明書の取得&#34;&gt;証明書の取得&lt;/h3&gt;

&lt;p&gt;certbot は &lt;a href=&#34;https://github.com/letsencrypt/acme-spec&#34;&gt;Automated Certificate Management Environment (ACME)&lt;/a&gt; というプロトコルにより証明書の取得を行います。&lt;br /&gt;
これは、Let&amp;rsquo;s Encrypt のサーバが証明書を取得しようとしているドメインのある URL にアクセスし、ちゃんとレスポンスを返すことができるかチェックするというものです。&lt;/p&gt;

&lt;p&gt;そのため事前に nginx 等の Web サーバを起動して、インターネットからリーチできる状態にしておく必要があります。&lt;br /&gt;
(&lt;code&gt;--standalone&lt;/code&gt; オプションを使えば certbot 自身が Web サーバを立ち上げてくれるが、すでに立っている Web サーバを止める必要があるので今回は使いませんでした)&lt;/p&gt;

&lt;p&gt;nginx の設定は以下のようにしておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {
  listen 80;
  server_name blog.yuyat.jp;

  location /.well-known/ {
    default_type &amp;quot;text/plain&amp;quot;;
    root /var/www/html;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そして証明書を取得する playbook はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;- name: obtains cert keys
  command: letsencrypt certonly --webroot -d blog.yuyat.jp -w /var/www/html --email YOUR_EMAIL@example.com --agree-tos --keep-until-expiring --non-interactive
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;: 取得対象のドメイン&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt;: Web サーバのルートディレクトリ (nginx.conf に合わせる)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--email&lt;/code&gt;: 自分のメールアドレス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--agree-tos&lt;/code&gt;: &lt;a href=&#34;https://letsencrypt.org/repository/&#34;&gt;規約&lt;/a&gt;への同意の意思表示。自動化においては必須のコマンドです。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--keep-until-expiring&lt;/code&gt;: 証明書取得済みの場合、期限切れでなければ取得を行わない。Ansible で再実行するときのために必要です。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;証明書が取得できたら nginx に証明書の設定を追加します。&lt;br /&gt;
証明書ファイルはドメイン名に応じたパスに格納されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
  listen 443 ssl http2;
  server_name blog.yuyat.jp;

  ssl_certificate     /etc/letsencrypt/live/blog.yuyat.jp/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/blog.yuyat.jp/privkey.pem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;証明書の自動更新&#34;&gt;証明書の自動更新&lt;/h3&gt;

&lt;p&gt;certbot には自動更新のためのサブコマンドも用意されています。&lt;br /&gt;
これを cron に登録しておくことで、証明書の有効期限を気にする必要がなくなります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;- name: auto update cert keys
  cron:
    name: letsencrypt
    cron_file: letsencrypt
    user: root
    special_time: daily
    job: sh -c &#39;letsencrypt renew &amp;amp;&amp;amp; /usr/sbin/service nginx reload&#39; &amp;gt;&amp;gt; /var/log/letsencrypt/cron.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デフォルトだと &lt;code&gt;/usr/sbin&lt;/code&gt; には &lt;code&gt;$PATH&lt;/code&gt; が通ってないところに注意が必要です。&lt;/p&gt;

&lt;p&gt;実際には &lt;a href=&#34;https://github.com/kazuho/kaztools/blob/master/cronlog&#34;&gt;cronlog&lt;/a&gt; を使うなどしてうまく通知を受け取れるようにしておくのが良いでしょう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo で作ったサイトを CircleCI で GitHub Pages に自動デプロイ</title>
      <link>https://blog.yuyat.jp/post/auto-deploy-hugo-to-github-pages-with-circleci/</link>
      <pubDate>Mon, 19 Sep 2016 10:30:35 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/auto-deploy-hugo-to-github-pages-with-circleci/</guid>
      <description>

&lt;p&gt;Hugo は Jekyll と違って、GitHub Pages に push しても勝手にページ生成はされません。&lt;br /&gt;
どうにかして自分で Hugo を実行し、それで生成されたファイルを push する必要があります。&lt;br /&gt;
このブログを構築するにあたって、CircleCI でビルドして自動デプロイする手順がまとまったので公開します。&lt;/p&gt;

&lt;p&gt;なお、このブログはカスタムドメインを使用していますが、それについての説明はこの記事ではしません。&lt;/p&gt;

&lt;h2 id=&#34;前提とする環境&#34;&gt;前提とする環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hugo Ver. 0.16&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;以下のような環境・手順で自動デプロイが行われるようにします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;記事のソースは &lt;code&gt;master&lt;/code&gt; ブランチに push する&lt;/li&gt;
&lt;li&gt;GitHub Pages 用のブランチには &lt;code&gt;gh-pages&lt;/code&gt; を使う&lt;/li&gt;
&lt;li&gt;&lt;code&gt;master&lt;/code&gt; ブランチが更新された時に &lt;code&gt;gh-pages&lt;/code&gt; が自動的に更新される&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;セットアップ手順&#34;&gt;セットアップ手順&lt;/h2&gt;

&lt;h3 id=&#34;対象ブランチの設定&#34;&gt;対象ブランチの設定&lt;/h3&gt;

&lt;p&gt;当然ですがリポジトリを準備します。&lt;/p&gt;

&lt;p&gt;そしてリポジトリの Settings から GitHub Pages の Source として &lt;code&gt;gh-pages&lt;/code&gt; を選択します。&lt;/p&gt;

&lt;p&gt;ただし、&lt;code&gt;gh-pages&lt;/code&gt; ブランチがない状態だと選択できないと思うので、その場合は手動でブランチだけ作るか、CircleCI によるデプロイが行われた後で行うと良いでしょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.yuyat.jp/images/auto-deploy-hugo-to-github-pages-with-circleci/github-setting.png&#34; width=&#34;248&#34; height=&#34;222&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;デプロイキーの用意&#34;&gt;デプロイキーの用意&lt;/h3&gt;

&lt;p&gt;CircleCI は CI 対象のリポジトリを登録する時に、自動的に対象リポジトリの SSH キーを生成します。&lt;br /&gt;
が、これは read-only なので、今回の様に CircleCI から GitHub に push したい場合は使えません。&lt;br /&gt;
なので手動で生成し、登録する必要があります。&lt;/p&gt;

&lt;p&gt;鍵の生成については GitHub のドキュメント等を参照してください。&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#generating-a-new-ssh-key&#34;&gt;Generating a new SSH key&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;生成したら GitHub リポジトリの Settings -&amp;gt; Deploy keys -&amp;gt; Add deploy key と進み、Key には生成した公開鍵ファイルの中身を貼り付け、Allow write access にチェックを入れてください。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.yuyat.jp/images/auto-deploy-hugo-to-github-pages-with-circleci/add-a-deploy-key.png&#34; width=&#34;311&#34; height=&#34;502&#34;&gt;&lt;/p&gt;

&lt;p&gt;また、CircleCI 側には秘密鍵を登録します。&lt;br /&gt;
Project Settings -&amp;gt; SSH Permissions -&amp;gt; Add SSH Key と進み、hostname には github.com、Private Key には秘密鍵の中身を貼り付けてください。&lt;br /&gt;
これで github.com へのデプロイ時にはこの鍵ファイルが使われるようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.yuyat.jp/images/auto-deploy-hugo-to-github-pages-with-circleci/add-an-ssh-key.png&#34; width=&#34;429&#34; height=&#34;289&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;デプロイスクリプトの用意&#34;&gt;デプロイスクリプトの用意&lt;/h3&gt;

&lt;p&gt;circle.yml は以下のようなものを準備します。&lt;br /&gt;
&lt;code&gt;master&lt;/code&gt; ブランチが更新された時はデプロイ用のスクリプトを実行するようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dependencies:
  pre:
  - wget https://github.com/spf13/hugo/releases/download/v0.16/hugo_0.16-1_amd64.deb
  - sudo dpkg -i hugo_0.16-1_amd64.deb

test:
  override:
    - &amp;quot;true&amp;quot;

deployment:
  production:
    branch: master
    commands:
    - ./scripts/deploy_production.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デプロイスクリプトは以下のようにします。&lt;br /&gt;
これを &lt;code&gt;scripts/deploy_production.sh&lt;/code&gt; という名前で保存して、忘れずに &lt;code&gt;chmod +x&lt;/code&gt; しておきましょう。&lt;br /&gt;
設定部分は環境変数でセットするようにしてあるので、コピペそのままで使えると思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash -eux

if [ -z &amp;quot;${GIT_USER_NAME}&amp;quot; ]; then
  echo &amp;quot;Please set an env var GIT_USER_NAME&amp;quot;
  exit 1
fi

if [ -z &amp;quot;${GIT_USER_EMAIL}&amp;quot; ]; then
  echo &amp;quot;Please set an env var GIT_USER_EMAIL&amp;quot;
  exit 1
fi

GIT_REPO=&amp;quot;git@github.com:${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git&amp;quot;

git submodule init
git submodule update

remote=`git ls-remote --heads 2&amp;gt; /dev/null | grep gh-pages || true`

if [ -n &amp;quot;$remote&amp;quot; ]; then
  git clone -b gh-pages &amp;quot;${GIT_REPO}&amp;quot; public
  rm -rf public/*
else
  git init public
  cd public
  git checkout -b gh-pages
  git remote add origin &amp;quot;${GIT_REPO}&amp;quot;
  cd ..
fi

hugo
cd public
git config --global user.name &amp;quot;${GIT_USER_NAME}&amp;quot;
git config --global user.email &amp;quot;${GIT_USER_EMAIL}&amp;quot;
git add --all
git commit -m &#39;Update [ci skip]&#39;
git push -f origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境変数は CircleCI の Project Settings から Environment Variables へと進んで、以下を登録します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GIT_USER_NAME&lt;/code&gt;: git commit 時の名前&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GIT_USER_EMAIL&lt;/code&gt;: git commit 時のメールアドレス&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いずれも普段使いの Git と同じ設定にするのが良いでしょう。&lt;/p&gt;

&lt;h3 id=&#34;hugo-をセットアップして-git-push&#34;&gt;Hugo をセットアップして git push&lt;/h3&gt;

&lt;p&gt;あとは Hugo のファイルを &lt;code&gt;git push&lt;/code&gt; すれば勝手にデプロイされます。&lt;br /&gt;
このとき以下の点に注意してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt; ディレクトリは &lt;code&gt;.gitignore&lt;/code&gt; に入れておき、生成されたファイルはコミットしないようにする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt; に &lt;code&gt;theme&lt;/code&gt; を設定する

&lt;ul&gt;
&lt;li&gt;本来コマンドラインオプションで渡すこともできるが、デプロイスクリプト中では指定していないので&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;こうして出来上がったのがこのブログです。&lt;br /&gt;
リポジトリは公開してあるので、気になる点があればチェックしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yuya-takeyama/blog.yuyat.jp&#34;&gt;https://github.com/yuya-takeyama/blog.yuyat.jp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy blogging!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ブログを Hugo でリニューアルした</title>
      <link>https://blog.yuyat.jp/post/brand-new-blog/</link>
      <pubDate>Mon, 19 Sep 2016 02:39:31 +0900</pubDate>
      
      <guid>https://blog.yuyat.jp/post/brand-new-blog/</guid>
      <description>&lt;p&gt;長年 Wordpress を使ってきたけどいい加減辛くなってきたので &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; に移行しました。&lt;/p&gt;

&lt;p&gt;過去ブログのデータ移行については過去に何度も挫折していて、結局リバースプロキシを使っていい感じに振り分けることにしました。&lt;br /&gt;
以前の記事 URL は基本的に全て生きているはずです。&lt;br /&gt;
コメントとかはできませんが。&lt;/p&gt;

&lt;p&gt;新ブログは GitHub Pages からリバースプロキシを介して配信しています。&lt;br /&gt;
Let&amp;rsquo;s Encrypt で SSL 化し、ついでに Nginx も HTTP2 化したので、その辺のネタはそのうちに書いていければと思ってます。&lt;/p&gt;

&lt;p&gt;あと、テーマは &lt;a href=&#34;https://github.com/chibicode&#34;&gt;@chibicode&lt;/a&gt; さんの &lt;a href=&#34;https://github.com/chibicode/hugo-theme-shiori&#34;&gt;hugo-theme-shiori&lt;/a&gt; をカスタマイズして使っています。&lt;/p&gt;

&lt;p&gt;今後ともよろしくお願いします。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>